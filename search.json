[{"path":"https://s-fleck.github.io/lgr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Stefan Fleck Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"lgr: A fully featured logging framework for R","text":"lgr logging framework R inspired Apache Log4j Python logging. follows object oriented design implemented R6 classes. enables lgr larger set features logging packages R, makes flexible easy extend. sure lgr right package , take look examples see lgr can .","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"quickstart","dir":"Articles","previous_headings":"Introduction","what":"Quickstart","title":"lgr: A fully featured logging framework for R","text":"lgr comes -called root logger ready go install . package developer can () set new Logger package, later. many use cases root Logger suffice.","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-to-the-console","dir":"Articles","previous_headings":"Introduction > Quickstart","what":"Logging to the console","title":"lgr: A fully featured logging framework for R","text":"can use formatting strings passed sprintf() lgr.","code":"# the root logger is called \"lgr\" lgr$info(\"Vampire stories are generally located in Styria.\") lgr$error(\"Vampires generally arrive in carriages drawn by %i black horses.\", 2)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-to-plaintext-files","dir":"Articles","previous_headings":"Introduction > Quickstart","what":"Logging to plaintext files","title":"lgr: A fully featured logging framework for R","text":"Usually don’t () want log console, want log files. Output Loggers managed Appenders. root Logger preconfigured console Appender (see output console). Let’s add file Appender: various Appenders available lgr R6 classes. instantiate object class (.e. create new appender) use $new() function example . Whenever see something lgr IsNamedLikeThis, can sure R6 class. look output, see timestamp format file appender slightly different timestamp format console Appender. Formatting handled Layouts, Appender exactly one:","code":"tf <- tempfile(fileext = \".info\") lgr$add_appender(AppenderFile$new(tf), name = \"file\") lgr$info(\"You must think I am joking\") readLines(tf) #> [1] \"INFO  [2025-07-15 08:04:31.825] You must think I am joking\" lgr$appenders$file$set_layout(LayoutFormat$new(timestamp_fmt = \"%B %d %T\")) lgr$info(\"No, I am quite serious\") readLines(tf) #> [1] \"INFO  [2025-07-15 08:04:31.825] You must think I am joking\" #> [2] \"INFO  [July 15 08:04:31] No, I am quite serious\"  #cleanup unlink(tf)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-to-json-files","dir":"Articles","previous_headings":"Introduction > Quickstart","what":"Logging to JSON files","title":"lgr: A fully featured logging framework for R","text":"log files, log normal text. want analyse logs later, ’s much better log format like JSON: JSON still somewhat human readable easy machines parse Many Appenders provide either $show() method $data active binding convenience, call readLines() & co manually. Please note hood, AppenderJson just AppenderFile LayoutJson. difference AppenderJson provides $data() method AppenderFile .","code":"# cleanup behind the old Appender unlink(tf)   lgr$remove_appender(\"file\")  # setup a JSON appender lgr$add_appender(AppenderJson$new(tf), name = \"json\") lgr$info(\"We lived in Styria\") cat(readLines(tf)) #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:31\",\"logger\":\"root\",\"caller\":\"eval\",\"msg\":\"We lived in Styria\"} read_json_lines(tf) #>   level           timestamp logger caller                msg #> 1   400 2025-07-15 08:04:31   root   eval We lived in Styria # show is a method and takes some extra arguments, like maximum number of lines # to show lgr$appenders$json$show() #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:31\",\"logger\":\"root\",\"caller\":\"eval\",\"msg\":\"We lived in Styria\"}  # $data always returns a data.frame if available. It is an active binding  # rather than a method, so no extra arguments are possible lgr$appenders$json$data   #>   level           timestamp logger caller                msg #> 1   400 2025-07-15 08:04:31   root   eval We lived in Styria"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"structured-logging-custom-fields","dir":"Articles","previous_headings":"Introduction > Quickstart","what":"Structured Logging (custom fields)","title":"lgr: A fully featured logging framework for R","text":"lgr treats LogEvent unit data, just message timestamp. log event can contain arbitrary data, though Appenders can handle well. JSON appender added particularly good handling R objects.","code":"# The default console appender displays custom fields as pseudo-json after the message lgr$info(\"Styria has\", poultry = c(\"capons\", \"turkeys\"))  # JSON can store most R objects quite naturally  read_json_lines(tf) #>   level           timestamp logger caller                msg         poultry #> 1   400 2025-07-15 08:04:31   root   eval We lived in Styria            NULL #> 2   400 2025-07-15 08:04:32   root   eval         Styria has capons, turkeys read_json_lines(tf)$poultry[[2]]  # works because poultry is a list column #> [1] \"capons\"  \"turkeys\""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"what-else","dir":"Articles","previous_headings":"Introduction > Quickstart","what":"What Else","title":"lgr: A fully featured logging framework for R","text":"examples piqued interest, rest vignette provide details workings lgr. Discussing Appenders configuration options beyond scope vignette, please refer function reference .","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"structure-of-the-logging-system","dir":"Articles","previous_headings":"Usage","what":"Structure of the logging system","title":"lgr: A fully featured logging framework for R","text":"want custom logging configurations, understand structure logging process. Logger collects information dispatches Appenders, also Appenders Parent Loggers (also see section hierarchical logging) Appender writes log message destination (console, file, database, etc…). Layout used Appender format LogEvents. example, AppenderFile uses LayoutFormat default write human readable log events text file, can also use LayoutJson produce machine readable JSON lines logfiles. LogEvents produced Logger dispatched Appenders. contain information logged (think row table). LogEvents usually contain log level, timestamp, message, name calling function, reference Logger created . addition, LogEvent can contain number custom fields. See examples 1 & 2","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"on-r6-classes","dir":"Articles","previous_headings":"Usage > Structure of the logging system","what":"On R6 classes","title":"lgr: A fully featured logging framework for R","text":"elements described R6 classes. R6 object orientation system R used many popular packages shiny, dplyr, plumber, roxygen2, testthat often behind scenes exposed lgr. recognize R6 classes package named following UpperCamelCase naming convention. one kind Logger one kind LogEvent, several subclasses Appenders Layouts. introduction R6 classes beyond scope document, can find official documentation also talk Youtube. short R6 classes store data (fields) together functions (methods) instantiated <classname>$new(). want create new AppenderFile, calling AppenderFile$new(file = tempfile()). Please Loggers never instantiated directly $new() always get_logger().","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"log-levels","dir":"Articles","previous_headings":"Usage","what":"Log levels","title":"lgr: A fully featured logging framework for R","text":"lgr supports standard log4j Log Levels outlined bellow. Log Level event represents severity. named log levels really just nicknames integer values, can use character integer representations interchangeably. can also use arbitrary integer values (greater 0), encouraged stick ones bellow. valid thresholds Appenders Loggers, valid levels LogEvents; e.g. lgr$set_threshold(NA) makes sense, lgr$log(\"\", \"example message\") . list named log levels stored global option (getOption(\"lgr.log_levels\")) can use add_log_levels() remove_log_levels() define named levels want . predefined logging methods (lgr$fatal(), etc..) standard log levels use lgr$log(level, message) create LogEvent custom log level.","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-with-the-root-logger","dir":"Articles","previous_headings":"Usage","what":"Logging with the Root Logger","title":"lgr: A fully featured logging framework for R","text":"lgr comes pre-configured root Logger. called root can set tree Loggers descent , basic use worry .","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-syntax","dir":"Articles","previous_headings":"Usage > Logging with the Root Logger","what":"Logging syntax","title":"lgr: A fully featured logging framework for R","text":"lgr Loggers R6 objects methods (functions) logging. can refer root logger lgr.","code":"lgr$fatal(\"This is an important message about %s going wrong\", \"->something<-\") lgr$trace(\"Trace messages are still hidden\") lgr$set_threshold(\"trace\") lgr$trace(\"Unless we lower the threshold\")"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"formatting-strings","dir":"Articles","previous_headings":"Usage > Logging with the Root Logger","what":"Formatting strings","title":"lgr: A fully featured logging framework for R","text":"can use sprintf() style formatting strings directly log messages.","code":"lgr$info(\"The sky was the color of %s, tuned to a dead chanel\", \"television\")"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logevents-the-atomic-unit-of-logging","dir":"Articles","previous_headings":"Usage","what":"LogEvents: The atomic unit of logging","title":"lgr: A fully featured logging framework for R","text":"LogEvents objects store information collected Logger. passed Appenders output , Appenders usually don’t utilize information present log event. last event produced Logger stored last_event field. LogEvents can contain standard values, arbitrary number extra values. extra values passed named arguments logging function (opposed parameters sprintf(), passed unnamed arguments). Appender whether process . consider making use structured logging liberally using output formats support (JSON), rather producing elaborately formatted hard parse log messages.","code":"lgr$info(\"Vampire stories are generally located in Styria\") lgr$last_event  # a summary output of the event #> INFO  [2025-07-15 08:04:32] Vampire stories are generally located in Styria lgr$last_event$values  # all values stored in the event as a list #> $level #> [1] 400 #>  #> $timestamp #> [1] \"2025-07-15 08:04:32 UTC\" #>  #> $logger #> [1] \"root\" #>  #> $caller #> [1] \"eval\" #>  #> $msg #> [1] \"Vampire stories are generally located in Styria\" #>  #> $rawMsg #> [1] \"Vampire stories are generally located in Styria\" # bad lgr$info(\"Processing track '%s' with %s waypoints\", \"track.gpx\", 32)  # Good tf <- tempfile() lgr$add_appender(AppenderJson$new(tf), \"json\") lgr$info(\"Processing track\", file = \"track.gpx\", waypoints = 32) lgr$appenders$json$data #>   level           timestamp logger caller              msg      file waypoints #> 1   400 2025-07-15 08:04:32   root   eval Processing track track.gpx        32"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"thresholds","dir":"Articles","previous_headings":"Usage","what":"Thresholds & Filters: controlling output detail","title":"lgr: A fully featured logging framework for R","text":"control level detail log output, can set thresholds Loggers Appenders. Logger threshold warn create LogEvents priorities warn, error fatal dispatch Appenders. threshold Logger Appender minimum log level LogEvent must Logger/Appender processes . require complex logic decide whether LogEvent created/processed can also assign filters Loggers/Appenders. Filters just functions exactly one argument, event (LogEvent filtered), return TRUE FALSE. applied threshold checked. Alternatively also formal R6 class Filters (?EventFilter) can use, usually necessary. examples:","code":"f1 <- function(event) { grepl(\"bird\", event$msg) } lgr$set_filters(list(f1))  lgr$info(\"is it a plane?\") lgr$info(\"no! is it a bird?\")  # since this is not a very useful filter, we better remove it again lgr$set_filters(NULL)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"appenders-managing-log-destinations","dir":"Articles","previous_headings":"Usage","what":"Appenders: Managing log destinations","title":"lgr: A fully featured logging framework for R","text":"root logger logs console default. want redirect output file can just add file appender lgr.","code":"tf <- tempfile()  # Add a new appender to a logger. We don't have to supply a name, but that # makes it easier to remove later. lgr$add_appender(AppenderFile$new(file = tf), name = \"file\")  # configure lgr so that it logs everything to the file, but only info and above # to the console lgr$set_threshold(NA) lgr$appenders$console$set_threshold(\"info\") lgr$appenders$file$set_threshold(NA) lgr$info(\"Another informational message\") lgr$debug(\"A debug message not shown by the console appender\")  readLines(tf) #> [1] \"INFO  [2025-07-15 08:04:32.886] Another informational message\"                     #> [2] \"DEBUG [2025-07-15 08:04:32.888] A debug message not shown by the console appender\"  # Remove the appender again lgr$remove_appender(\"file\") unlink(tf)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"hierarchy","dir":"Articles","previous_headings":"Usage","what":"Inheritance: Hierarchical Loggers","title":"lgr: A fully featured logging framework for R","text":"Logger hierarchies powerful concept organize logging different parts larger system. mainly relevant package developers. good practice separate Logger package. Since common R build complex systems hierarchically organised packages, hierarchies usually pretty flat (.e. Loggers inherit root logger). newly created Logger child parent Logger, derived name. lg <- get_logger(\"foo/bar\") creates logger qualified name foo/bar whose parent logger foo whose parent (implicitly) root logger. logger foo exist scenario, created automatically. behaviour might sound strange first, mimics tried tested behaviour python logging. way logging decoupled business logic program abort forgot initialize logger hierarchy whatever reason. logger dispatches LogEvents creates Appenders, also Appenders ancestral Loggers (ignoring threshold Filters ancestral Loggers, Appenders). define Loggers package, configure (custom Appenders thresholds); left user package. sounds confusing , take look examples ?logger_tree. common use cases pretty easy understand illustrate pretty well. Example hierarchy package fancymodel provides model along plumber API shiny web-interface package.","code":"# prints a tree structure of all registered loggers logger_tree() root [info] -> 1 appenders └─fancymodel   ├─plumber   └─#shiny     ├─server [trace] -> 2 appenders     └─ui -> 1 appenders"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"log-flow","dir":"Articles","previous_headings":"Usage > Inheritance: Hierarchical Loggers","what":"Log flow","title":"lgr: A fully featured logging framework for R","text":"graph bellow outlines flow LogEvents logging system. important reference want work Filters Logger hierarchies.","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-with-loggerglue","dir":"Articles","previous_headings":"Usage","what":"Logging with LoggerGlue","title":"lgr: A fully featured logging framework for R","text":"glue nicely designed package string interpolation. makes composing log messages flexible comfortable price additional dependency slightly less performance sprintf() (used normal Loggers). take advantage glue, simply create new LoggerGlue like : Glue lets define temporary variables inside glue() call. normal Logger, named arguments get turned custom fields. can suppress behaviour making named argument start \".\".","code":"# install.packages(\"glue\")  lg <- get_logger_glue(\"glue/logger\")  lg$info(   \"glue automatically \",    \"pastes together unnamed arguments \",   \"and evaluates arbitray expressions inside braces {Sys.Date()}\" ) lg$info(\"For more info on glue see {website}\", website = \"https://glue.tidyverse.org/\") lg$info(\"Glue is available from {.cran}\", .cran = \"https://CRAN.R-project.org/package=glue\")"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"with-setters","dir":"Articles","previous_headings":"Configuration","what":"With setters","title":"lgr: A fully featured logging framework for R","text":"several different ways configure loggers. straight forward one use setters specify Loggers properties. lgr sets Loggers way R6 piping $ possible. works similar magrittr (#%>#) pipes.","code":"lg <- get_logger(\"test\") lg$config(NULL)  # resets logger to unconfigured state #> <Logger> [all] test #>  #> inherited appenders: #>   console: <AppenderConsole> [info] -> console lg$set_threshold(\"fatal\") lg$   set_threshold(\"info\")$   set_appenders(AppenderConsole$new(threshold = \"info\"))$   set_propagate(FALSE)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"with-a-list-object","dir":"Articles","previous_headings":"Configuration","what":"With a list object","title":"lgr: A fully featured logging framework for R","text":"","code":"lg$config(list(   threshold = \"info\",   propagate = FALSE,   appenders = AppenderConsole$new(threshold = \"info\") )) #> <Logger> [info] test #>  #> appenders: #>   [[1]]: <AppenderConsole> [info] -> console"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"with-yaml-or-json","dir":"Articles","previous_headings":"Configuration","what":"With YAML or JSON","title":"lgr: A fully featured logging framework for R","text":"can use YAML JSON config files lgr. can also pass YAML/JSON directly character string (vector one element per line)","code":"lg$config(\"path/to/config.yaml\") lg$config(\"path/to/config.json\") # Via YAML cfg <- \"   Logger:     threshold: info     propagate: false     appenders:       AppenderConsole:         threshold: info \" lg$config(cfg) #> <Logger> [info] test #>  #> appenders: #>   AppenderConsole: <AppenderConsole> [info] -> console"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-to-the-console-1","dir":"Articles","previous_headings":"Examples","what":"Logging to the console","title":"lgr: A fully featured logging framework for R","text":"lgr comes simple powerful formatting syntax LogEvents. Please refer ?format.LogEvent full list available placeholders. enough , can use LayoutGlue based awesome glue package. syntax bit verbose, AppenderGlue bit less performant AppenderFormat, possibilities endless. fields [LogEvent] object exposed LayoutGlue, please refer ?LogEvent list available Fields.","code":"lg <- get_logger(\"test\") lg$set_appenders(list(cons = AppenderConsole$new())) lg$set_propagate(FALSE)   lg$info(\"the default format\") lg$appenders$cons$layout$set_fmt(\"%L (%n) [%t] %c(): !! %m !!\") lg$info(\"A more involved custom format\") # install.packages(\"glue\") library(glue) lg$appenders$cons$set_layout(LayoutGlue$new(   fmt = \"{.logger$name} {level_name} {caller}: {toupper(msg)}\" )) lg$info(\"with glue\")"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-to-json-files-1","dir":"Articles","previous_headings":"Examples","what":"Logging to JSON files","title":"lgr: A fully featured logging framework for R","text":"JavaScript Object Notation (JSON) open-standard file format uses human-readable text transmit data objects consisting attribute–value pairs array data types (Wikipedia). JSON recommended text-based logging format logging files 1, human- well machine readable. log different format good reasons . easiest way log JSON files AppenderJson2 JSON easy parse analyse R. lgr provides function read_json_lines() can used read JSON log files, can also use AppenderJson’s $data binding even convenient method read logfile. JSON also human readable, though vignette transport fact well lack horizontal space.","code":"# install.packages(\"jsonlite\") tf <- tempfile()  lg <- get_logger(\"test\")  lg$set_appenders(list(json = AppenderJson$new(file = tf))) lg$set_propagate(FALSE)  lg$info(\"JSON naturally \", field = \"custom\") lg$info(\"supports custom\", numbers = 1:3) lg$info(\"log fields\", use = \"JSON\") lg$appenders$json$data # same as  read_json_lines(tf) #>   level           timestamp logger caller             msg  field numbers  use #> 1   400 2025-07-15 08:04:33   test   eval JSON naturally  custom    NULL <NA> #> 2   400 2025-07-15 08:04:33   test   eval supports custom   <NA> 1, 2, 3 <NA> #> 3   400 2025-07-15 08:04:33   test   eval      log fields   <NA>    NULL JSON lg$appenders$json$show() # same as cat(readLines(tf), sep = \"\\n\") #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:33\",\"logger\":\"test\",\"caller\":\"eval\",\"msg\":\"JSON naturally \",\"field\":\"custom\"} #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:33\",\"logger\":\"test\",\"caller\":\"eval\",\"msg\":\"supports custom\",\"numbers\":[1,2,3]} #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:33\",\"logger\":\"test\",\"caller\":\"eval\",\"msg\":\"log fields\",\"use\":\"JSON\"} # cleanup lg$config(NULL) #> <Logger> [all] test #>  #> inherited appenders: #>   console: <AppenderConsole> [info] -> console unlink(tf)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-to-rotating-files","dir":"Articles","previous_headings":"Examples","what":"Logging to rotating files","title":"lgr: A fully featured logging framework for R","text":"lgr can also log rotating files. following example logs file reset backed-reaches size 10kb. last 5 backups logfile kept.","code":"# install.packages(\"rotor\") tf <- tempfile(fileext = \".log\")  lg <- get_logger(\"test\")$   set_propagate(FALSE)$   set_appenders(list(rotating = AppenderFileRotating$new(     file = tf,      size = \"10 kb\",     max_backups = 5))   ) #> Superclass AppenderFile has cloneable=FALSE, but subclass AppenderFileRotating has cloneable=TRUE. A subclass cannot be cloneable when its superclass is not cloneable, so cloning will be disabled for AppenderFileRotating.  for (i in 1:100) lg$info(paste(LETTERS, sep = \"-\"))  # display info on the backups of tf lg$appenders$rotating$backups #>                                     path             name sfx ext  size isdir #> 1 /tmp/RtmpjK5HYq/file20095d5cf39d.1.log file20095d5cf39d   1 log 10608 FALSE #> 2 /tmp/RtmpjK5HYq/file20095d5cf39d.2.log file20095d5cf39d   2 log 10608 FALSE #> 3 /tmp/RtmpjK5HYq/file20095d5cf39d.3.log file20095d5cf39d   3 log 10608 FALSE #> 4 /tmp/RtmpjK5HYq/file20095d5cf39d.4.log file20095d5cf39d   4 log 10608 FALSE #> 5 /tmp/RtmpjK5HYq/file20095d5cf39d.5.log file20095d5cf39d   5 log 10608 FALSE #>   mode               mtime               ctime               atime  uid gid #> 1  644 2025-07-15 08:04:34 2025-07-15 08:04:34 2025-07-15 08:04:34 1001 118 #> 2  644 2025-07-15 08:04:34 2025-07-15 08:04:34 2025-07-15 08:04:34 1001 118 #> 3  644 2025-07-15 08:04:34 2025-07-15 08:04:34 2025-07-15 08:04:34 1001 118 #> 4  644 2025-07-15 08:04:34 2025-07-15 08:04:34 2025-07-15 08:04:34 1001 118 #> 5  644 2025-07-15 08:04:34 2025-07-15 08:04:34 2025-07-15 08:04:34 1001 118 #>    uname grname index #> 1 runner docker     1 #> 2 runner docker     2 #> 3 runner docker     3 #> 4 runner docker     4 #> 5 runner docker     5  # manually delete all backups invisible(lg$appenders$rotating$prune(0)) lg$appenders$rotating$backups #>  [1] path   name   sfx    ext    size   isdir  mode   mtime  ctime  atime  #> [11] uid    gid    uname  grname index  #> <0 rows> (or 0-length row.names)  #cleanup unlink(tf)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"examples-hierarchy","dir":"Articles","previous_headings":"Examples","what":"Logger hierarchies","title":"lgr: A fully featured logging framework for R","text":"common use cases creating new Logger rather just using root Logger create Package contain logging. way can separate Appenders (e.g logfiles) thresholds package. print() method Loggers gives nice overview newly created Logger: tells us lg logs events least level info. single (unnamed) Appender logs temporary file, dispatches LogEvents creates Appenders root Logger (ignoring threshold filters root Logger, Appenders). can use lg$fatal(), lg$info(), etc.. log messages Logger: want lg dispatch root Logger, can set propagate FALSE. take look Logger , now see inherit Appenders anymore Consequently, lg longer outputs log messages console","code":"# The logger name should be the same as the package name tf <- tempfile() lg <- get_logger(\"mypackage\") lg$add_appender(AppenderFile$new(tf)) print(lg) #> <Logger> [all] mypackage #>  #> appenders: #>   [[1]]: <AppenderFile> [all] -> /tmp/RtmpjK5HYq/file200991a49b6 #>  #> inherited appenders: #>   console: <AppenderConsole> [info] -> console lg$info(\"A test message for lg\") lg$set_propagate(FALSE) print(lg) #> <Logger> [all] mypackage #>  #> appenders: #>   [[1]]: <AppenderFile> [all] -> /tmp/RtmpjK5HYq/file200991a49b6 lg$info(\"Nothing to see here\") # cleanup lg$config(NULL) #> <Logger> [all] mypackage #>  #> inherited appenders: #>   console: <AppenderConsole> [info] -> console unlink(tf)"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"buffered-logging","dir":"Articles","previous_headings":"Examples","what":"Buffered logging","title":"lgr: A fully featured logging framework for R","text":"main purpose AppenderBuffer retain LogEvents memory write destinations later point time, e.g. Buffer full needs flushed. example, log remote database can postpone costly operation analysis finished. setting filter custom $should_flush() method AppenderBuffer, can define complex conditions trigger flushing. example, output last 5 LogEvents happened error occurred.","code":"lg <- get_logger(\"buffer\")  lg$   set_threshold(NA)$   set_propagate(FALSE)$   set_appenders(     AppenderBuffer$new(     threshold = NA,     buffer_size = 5, # can hold 5 events, the 6th will trigger flushing     flush_on_exit = FALSE,     flush_on_rotate = FALSE,     flush_threshold = \"error\",     appenders = AppenderConsole$new(threshold = NA)   ))  # The for loop below stores 8 log events in the Buffer for (nm in month.name[1:8]) lg$debug(\"%s\", nm)  # An event of level 'error' or 'fatal' triggers flushing of the buffer lg$error(\"But the days grow short when you reach September\")"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"logging-to-databases","dir":"Articles","previous_headings":"Examples","what":"Logging to databases","title":"lgr: A fully featured logging framework for R","text":"Logging databases simple, though aspects can tricky configure based backend used. performance reasons database inserts buffered default. works exactly identical described AppenderBuffer. want write LogEvent directly database, just set buffer size 0. lgr 0.4.0, database appenders part lgrExtra package installed separately. Database logging still somewhat experimental.","code":"# install.packages(\"RSQLite\") # install.packages(\"lgrExtra\") lg <- get_logger(\"db_logger\") lg$   set_propagate(FALSE)$   add_appender(     name = \"db\",      lgrExtra::AppenderDbi$new(       conn = DBI::dbConnect(RSQLite::SQLite()),       table = \"log\",       buffer_size = 2L     )   )  lg$info(\"Logging to databases uses a buffer\") lg$info(\"As the buffer size is 2, no insert took place till now\") lg$appenders$db$show()  lg$info(\"Now as the buffer is rotated, all events are output to the db\") lg$appenders$db$show()"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"adding-default-extra-fields-to-messages","dir":"Articles","previous_headings":"Examples","what":"Adding default extra fields to messages","title":"lgr: A fully featured logging framework for R","text":"abusing Filters, lgr can modify LogEvents processed. One example useful assigning grouping identifier series log calls. with_log_value() provides convenient wrapper inject values log calls. alternative way achieve use one preconfigured Filters come lgr. approach comfortable use within functions. result cases: can use with_log_level() FilterForceLevel similar fashion modify log level events conveniently.","code":"# setup an example function clean   <- function() lgr$info(\"cleaning data\") process <- function() lgr$info(\"processing data\") output  <- function() lgr$info(\"outputing data\")  analyze <- function(){   clean()   process()   output() } with_log_value(   list(dataset_id = \"dataset1\"),    analyze() ) analyze <- function(id = \"dataset1\"){   lgr$add_filter(FilterInject$new(dataset_id = id), name = \"inject\")   on.exit(lgr$remove_filter(\"inject\"))      clean()   process()   output() } analyze()"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"temporarily-disable-logging","dir":"Articles","previous_headings":"Examples","what":"Temporarily disable logging","title":"lgr: A fully featured logging framework for R","text":"Temporary disabling logging portions code straight forward easy lgr:","code":"without_logging({   lgr$warn(\"Oh Yeah?\")   lgr$fatal(\"Oh No\") })"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"adding-a-custom-logger-to-a-package","dir":"Articles","previous_headings":"Examples","what":"Adding a custom logger to a package","title":"lgr: A fully featured logging framework for R","text":"package author, good practice define separate logger package. gives users ability easily enable/disable logging per-package basis. Loggers must initialized packages .onLoad hook. can adding following code .R file inside R/ directory package: can also just use lgr::use_logger() generate appropriate code package automatically. set can use lg$fatal(), lg$info(), etc… inside package. define appenders, since log events get redirected root Logger (see Inheritance).","code":"# mypackage/R/mypackage-package.R .onLoad <- function(...){   assign(     \"lg\",  # the recommended name for a logger object     lgr::get_logger(name = \"mypackage\"),  # should be the same as the package name     envir = parent.env(environment())   ) }"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"creating-a-layout-that-mimics-nodejs-winston-logstash","dir":"Articles","previous_headings":"Examples","what":"Creating a Layout that mimics NodeJS Winston logstash","title":"lgr: A fully featured logging framework for R","text":"see https://github.com/s-fleck/lgr/issues/29","code":""},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"adding-the-source-file-r-script-to-the-log-event","dir":"Articles","previous_headings":"Examples","what":"Adding the source file / R-script to the log event","title":"lgr: A fully featured logging framework for R","text":"Getting source file sadly non-trivial R, otherwise included core logging functions. Luckily, easy add filters awesome .path package. solution works scenarios, (example, building vignette).","code":"# install.packages(\"this.path\")  lg <- get_logger(\"srcfile\") lg$add_filter(function(event){   tryCatch({     event$srcfile <- this.path::this.path()   }, error = function(e) NULL)   TRUE })"},{"path":"https://s-fleck.github.io/lgr/articles/lgr.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"lgr: A fully featured logging framework for R","text":"Python Logging Eric Stenbock: True Story Vampire","code":""},{"path":"https://s-fleck.github.io/lgr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Fleck. Author, maintainer.","code":""},{"path":"https://s-fleck.github.io/lgr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fleck S (2025). lgr: Fully Featured Logging Framework. R package version 0.4.5.9000, https://s-fleck.github.io/lgr/.","code":"@Manual{,   title = {lgr: A Fully Featured Logging Framework},   author = {Stefan Fleck},   year = {2025},   note = {R package version 0.4.5.9000},   url = {https://s-fleck.github.io/lgr/}, }"},{"path":"https://s-fleck.github.io/lgr/index.html","id":"lgr","dir":"","previous_headings":"","what":"A Fully Featured Logging Framework","title":"A Fully Featured Logging Framework","text":"lgr logging package R built back R6 classes. designed flexible, performant extensible. package vignette contains comprehensive description features lgr (unique among R logging packages) along many code examples. Users worked R6 classes , find configuring Loggers bit strange verbose, care taken keep syntax common logging tasks interactive usage simple concise. User experience shiny, plumber, python logging Apache Log4j feel home. User proficient R6 classes also find easy extend customize lgr, example appenders Loggers Appenders.","code":""},{"path":"https://s-fleck.github.io/lgr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"A Fully Featured Logging Framework","text":"Hierarchical loggers like log4j python logging. useful want able configure logging per-package basis. arbitrary number appenders logger. single logger can write console, logfile, database, etc… . Support structured logging. opposed many logging packages R log event just message timestamp, object can contain arbitrary data fields. useful producing machine readable logs. Vectorized logging (lgr$fatal(capture.output(iris)) works) Lightning fast -memory logs interactive use. databases (buffered directly) email pushbullet plaintext files (powerful formatting syntax) JSON files arbitrary data fields Rotating files reset backed-reach certain file size age memory buffers (colored) console output Optional support use glue instead sprintf() composing log messages.","code":""},{"path":"https://s-fleck.github.io/lgr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Fully Featured Logging Framework","text":"log event lgr call lgr$<logging function>(). Unnamed arguments logging function interpreted sprintf(). way create loggers glue instead please refer vignette. Logger can several Appenders. example, can add JSON appender log file little effort. passing named argument log function, can log text arbitrary R objects. appenders support structured logging perfectly, JSON . way can create logfiles machine well (somewhat) human readable. examples please see package vignette documentation","code":"lgr$fatal(\"A critical error\") #> FATAL [11:32:48.843] A critical error lgr$error(\"A less severe error\") #> ERROR [11:32:48.864] A less severe error lgr$warn(\"A potentially bad situation\") #> WARN  [11:32:48.868] A potentially bad situation lgr$info(\"iris has %s rows\", nrow(iris)) #> INFO  [11:32:48.869] iris has 150 rows  # the following log levels are hidden by default lgr$debug(\"A debug message\") lgr$trace(\"A finer grained debug message\") tf <- tempfile() lgr$add_appender(AppenderFile$new(tf, layout = LayoutJson$new())) lgr$info(\"cars has %s rows\", nrow(cars)) #> INFO  [11:32:48.878] cars has 50 rows cat(readLines(tf)) #> {\"level\":400,\"timestamp\":\"2025-07-13 11:32:48\",\"logger\":\"root\",\"caller\":\"eval\",\"msg\":\"cars has 50 rows\",\"rawMsg\":\"cars has %s rows\"} lgr$info(\"loading %s\", \"cars\", rows = nrow(cars), cols = ncol(cars), vector = c(1, 2, 3)) #> INFO  [11:32:48.893] loading cars {rows: `50`, cols: `2`, vector: (1, 2, 3)} cat(readLines(tf), sep = \"\\n\") #> {\"level\":400,\"timestamp\":\"2025-07-13 11:32:48\",\"logger\":\"root\",\"caller\":\"eval\",\"msg\":\"cars has 50 rows\",\"rawMsg\":\"cars has %s rows\"} #> {\"level\":400,\"timestamp\":\"2025-07-13 11:32:48\",\"logger\":\"root\",\"caller\":\"eval\",\"msg\":\"loading cars\",\"rawMsg\":\"loading %s\",\"rows\":50,\"cols\":2,\"vector\":[1,2,3]}"},{"path":"https://s-fleck.github.io/lgr/index.html","id":"see-lgr-in-action","dir":"","previous_headings":"","what":"See lgr in action","title":"A Fully Featured Logging Framework","text":"lgr used govern console output shiny based csv editor shed","code":"# install.packages(\"remotes\") remotes::install_github(\"s-fleck/shed\") library(shed)  # log only output from the \"shed\" logger to a file logfile <- tempfile() lgr::get_logger(\"shed\")$add_appender(AppenderFile$new(logfile)) lgr::threshold(\"all\")  # edit away and watch the rstudio console! lgr$info(\"starting shed\") shed(iris)   lgr$info(\"this will not end up in the log file\")  readLines(logfile)  # cleanup file.remove(logfile)"},{"path":"https://s-fleck.github.io/lgr/index.html","id":"development-status","dir":"","previous_headings":"","what":"Development status","title":"A Fully Featured Logging Framework","text":"lgr stable safe use. ’ve using production code several years . little recent development ’s pretty stable contains (nearly) planned features. Notable points still planned (without specific ETA): Support config files heavily experimental incomplete. important basic feature, yet found great way support generic way. now, recommend come solution need lgr work production environment relies config files. Improve documentation. documentation mostly complete, perfect. ’s something missing something don’t understand, please ask (example via github issue).","code":""},{"path":"https://s-fleck.github.io/lgr/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"A Fully Featured Logging Framework","text":"R6: R6 class system provides framework lgr built Package lgr ever depend . package developer want add logging package, transitive dependency worry , configuring loggers left user package.","code":""},{"path":"https://s-fleck.github.io/lgr/index.html","id":"optional-dependencies","dir":"","previous_headings":"Dependencies","what":"Optional dependencies","title":"A Fully Featured Logging Framework","text":"lgr comes long list optional dependencies make wide range appenders possible. need dependencies Appenders actually want use. Care taken choose packages slim, stable, minimal dependencies, well maintained : Extra appenders (main package): jsonlite JSON logging via LayoutJson. JSON popular plaintext based file format easy read humans machines alike. rotor log rotation via AppenderFileRotating co. data.table fast -memory logging AppenderDt, also database / DBI Appenders. glue flexible formatting syntax via LoggerGlue LayoutGlue. Extra appenders via lgrExtra: support Elasticsearch, Dynatrace, Push- Email notifications, etc… well relevant dependencies please refer documentation lgrExtra extra features: yaml configuring loggers via YAML files (experimental) crayon colored console output. whoami guessing user name various sources. can also set user name manually want use logging. desc package development convenience function use_logger() cli printing tree structure registered loggers logger_tree() Suggests (future, future.apply) provide extra functionality included automated unit tests run lgr.","code":""},{"path":"https://s-fleck.github.io/lgr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Fully Featured Logging Framework","text":"can install lgr CRAN can install current development version directly github","code":"install.packages(\"lgr\") #install.packages(\"remotes\") remotes::install_github(\"s-fleck/lgr\")"},{"path":"https://s-fleck.github.io/lgr/index.html","id":"outlook","dir":"","previous_headings":"","what":"Outlook","title":"A Fully Featured Logging Framework","text":"long term goal support (nearly) features python logging module. experience python logging Log4j missing features/appenders ’d like see, please feel free post feature request issue tracker.","code":""},{"path":"https://s-fleck.github.io/lgr/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"A Fully Featured Logging Framework","text":"diagrams.net flow chart vignette","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":null,"dir":"Reference","previous_headings":"","what":"Appenders — Appender","title":"Appenders — Appender","text":"Appenders attached Loggers manage output LogEvents destination - console text file. Appender single Layout tells format LogEvent. details please refer documentations specific Appenders. Additional Appenders support wide range output destinations - databases, email, push-notifications Linux syslog - available package lgrExtra. NOTE: abstract class. Abstract classes instantiated directly, exported package developers want extend lgr - example creating Appenders Layouts. Please refer see also section actual implementations class.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Appenders — Appender","text":"lgr::Filterable -> Appender","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Appenders — Appender","text":"destination output destination Appender human-readable form. mainly used printing information Appender .","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Appenders — Appender","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Appenders — Appender","text":"Appender$new() Appender$append() Appender$set_threshold() Appender$set_layout() Appender$format()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appenders — Appender","text":"","code":"Appender$new(layout = Layout$new(), threshold = NA_integer_)"},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"method-append-","dir":"Reference","previous_headings":"","what":"Method append()","title":"Appenders — Appender","text":"Process LogEvent event. method usually called user, invoked Logger","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Appenders — Appender","text":"","code":"Appender$append(event)"},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"method-set-threshold-","dir":"Reference","previous_headings":"","what":"Method set_threshold()","title":"Appenders — Appender","text":"Set minimum log level triggers Appender. See threshold() examples","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Appenders — Appender","text":"","code":"Appender$set_threshold(level)"},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Appenders — Appender","text":"level character integer scalar log level. See log_levels.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"method-set-layout-","dir":"Reference","previous_headings":"","what":"Method set_layout()","title":"Appenders — Appender","text":"Set Layout Appender use formatting LogEvents","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Appenders — Appender","text":"","code":"Appender$set_layout(layout)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Appender.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Appenders — Appender","text":"","code":"Appender$format(color = FALSE, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to a memory buffer — AppenderBuffer","title":"Log to a memory buffer — AppenderBuffer","text":"Appender Buffers LogEvents -memory redirects Appenders certain conditions met.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Log to a memory buffer — AppenderBuffer","text":"appenders, set_appenders() Like Logger. Buffered events passed Appenders flush triggered flush_on_exit, set_flush_on_exit(x) TRUE FALSE: Whether buffer flushed Appender garbage collected (f.e close R) flush_on_rotate, set_flush_on_rotate TRUE FALSE: Whether buffer flushed Buffer full (f.e close R). Setting can slightly negative performance impacts.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to a memory buffer — AppenderBuffer","text":"lgr::Filterable -> lgr::Appender -> lgr::AppenderMemory -> AppenderBuffer","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to a memory buffer — AppenderBuffer","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$set_layout() lgr::Appender$set_threshold() lgr::AppenderMemory$append() lgr::AppenderMemory$set_buffer_size() lgr::AppenderMemory$set_flush_on_exit() lgr::AppenderMemory$set_flush_on_rotate() lgr::AppenderMemory$set_flush_threshold() lgr::AppenderMemory$set_should_flush() lgr::AppenderMemory$show()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to a memory buffer — AppenderBuffer","text":"AppenderBuffer$new() AppenderBuffer$flush() AppenderBuffer$clear() AppenderBuffer$set_appenders() AppenderBuffer$add_appender() AppenderBuffer$remove_appender() AppenderBuffer$format()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Log to a memory buffer — AppenderBuffer","text":"Layout Appender used format console output $show() method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a memory buffer — AppenderBuffer","text":"","code":"AppenderBuffer$new(   threshold = NA_integer_,   layout = LayoutFormat$new(fmt = \"%L [%t] %m\", timestamp_fmt = \"%H:%M:%S\", colors     = getOption(\"lgr.colors\")),   appenders = NULL,   buffer_size = 1000,   flush_threshold = NULL,   flush_on_exit = TRUE,   flush_on_rotate = TRUE,   should_flush = NULL,   filters = NULL )"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"method-flush-","dir":"Reference","previous_headings":"","what":"Method flush()","title":"Log to a memory buffer — AppenderBuffer","text":"Sends buffer's contents attached Appenders clears Buffer","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a memory buffer — AppenderBuffer","text":"","code":"AppenderBuffer$flush()"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"method-clear-","dir":"Reference","previous_headings":"","what":"Method clear()","title":"Log to a memory buffer — AppenderBuffer","text":"Clears buffer, discarding buffered Events","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a memory buffer — AppenderBuffer","text":"","code":"AppenderBuffer$clear()"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"method-set-appenders-","dir":"Reference","previous_headings":"","what":"Method set_appenders()","title":"Log to a memory buffer — AppenderBuffer","text":"Exactly like Logger, AppenderBuffer can arbitrary amount Appenders attached. buffer flushed, buffered events dispatched Appenders.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a memory buffer — AppenderBuffer","text":"","code":"AppenderBuffer$set_appenders(x)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a memory buffer — AppenderBuffer","text":"x single Appender list thereof. Appenders control output Logger. aware Logger also inherits Appenders ancestors (see vignette(\"lgr\", package = \"lgr\") info Logger inheritance).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"method-add-appender-","dir":"Reference","previous_headings":"","what":"Method add_appender()","title":"Log to a memory buffer — AppenderBuffer","text":"Add Appender AppenderBuffer Add remove Appender. Supplying name optional recommended. adding Appender appender$add_appender(AppenderConsole$new(), name = \"console\") can refer via appender$appenders$console. remove_appender() can remove Appender position name.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a memory buffer — AppenderBuffer","text":"","code":"AppenderBuffer$add_appender(appender, name = NULL)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a memory buffer — AppenderBuffer","text":"appender single Appender name character scalar. Optional recommended.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"method-remove-appender-","dir":"Reference","previous_headings":"","what":"Method remove_appender()","title":"Log to a memory buffer — AppenderBuffer","text":"remove appender","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a memory buffer — AppenderBuffer","text":"","code":"AppenderBuffer$remove_appender(pos)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a memory buffer — AppenderBuffer","text":"pos integer index character name Appender(s) remove","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderBuffer.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a memory buffer — AppenderBuffer","text":"","code":"AppenderBuffer$format(...)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to the console — AppenderConsole","title":"Log to the console — AppenderConsole","text":"Appender outputs R console. package crayon installed log levels coloured default (can modify behaviour passing custom Layout).","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to the console — AppenderConsole","text":"lgr::Filterable -> lgr::Appender -> AppenderConsole","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to the console — AppenderConsole","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$format() lgr::Appender$set_layout() lgr::Appender$set_threshold()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to the console — AppenderConsole","text":"AppenderConsole$new() AppenderConsole$append() AppenderConsole$set_connection()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to the console — AppenderConsole","text":"","code":"AppenderConsole$new(   threshold = NA_integer_,   layout = LayoutFormat$new(fmt = \"%L [%t] %m %f\", timestamp_fmt = \"%H:%M:%OS3\",     colors = getOption(\"lgr.colors\", list())),   filters = NULL,   connection = NULL )"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to the console — AppenderConsole","text":"connection connection character scalar. See file argument cat() details. Defaults stdout(), except inside knitr rendering processes defaults stderr().","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to the console — AppenderConsole","text":"","code":"AppenderConsole$append(event)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to the console — AppenderConsole","text":"","code":"AppenderConsole$set_connection(connection)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to the console — AppenderConsole","text":"connection connection character scalar. See file argument cat() details. Defaults stdout(), except inside knitr rendering processes defaults stderr().","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderConsole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log to the console — AppenderConsole","text":"","code":"# create a new logger with propagate = FALSE to prevent routing to the root # logger. Please look at the section \"Logger Hirarchies\" in the package # vignette for more info. lg  <- get_logger(\"test\")$set_propagate(FALSE)  lg$add_appender(AppenderConsole$new()) lg$add_appender(AppenderConsole$new(   layout = LayoutFormat$new(\"[%t] %c(): [%n] %m\", colors = getOption(\"lgr.colors\"))))  # Will output the message twice because we attached two console appenders lg$warn(\"A test message\") #> WARN  [08:04:14.376] A test message #> [2025-07-15 08:04:14.376] eval(): [300] A test message lg$config(NULL) # reset config #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to a file — AppenderFile","title":"Log to a file — AppenderFile","text":"simple Appender outputs file file system. plan log text files, consider logging JSON files take look AppenderJson, shortcut AppenderFile preconfigured LayoutJson.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to a file — AppenderFile","text":"lgr::Filterable -> lgr::Appender -> AppenderFile","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Log to a file — AppenderFile","text":"file character scalar. path log file data data.frame. Contents file parsed data.frame used Layout supports parsing log file data (notably LayoutJson). throw error Layout support parsing. data character scalar. Like $data, returns data.table instead (requires data.table package).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to a file — AppenderFile","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$format() lgr::Appender$set_layout() lgr::Appender$set_threshold()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to a file — AppenderFile","text":"AppenderFile$new() AppenderFile$append() AppenderFile$set_file() AppenderFile$show()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a file — AppenderFile","text":"","code":"AppenderFile$new(   file,   threshold = NA_integer_,   layout = LayoutFormat$new(),   filters = NULL )"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a file — AppenderFile","text":"","code":"AppenderFile$append(event)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"method-set-file-","dir":"Reference","previous_headings":"","what":"Method set_file()","title":"Log to a file — AppenderFile","text":"Set log file","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a file — AppenderFile","text":"","code":"AppenderFile$set_file(file)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a file — AppenderFile","text":"file character scalar. Path log file. file exist created.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"method-show-","dir":"Reference","previous_headings":"","what":"Method show()","title":"Log to a file — AppenderFile","text":"Display contents log file.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a file — AppenderFile","text":"","code":"AppenderFile$show(threshold = NA_integer_, n = 20L)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a file — AppenderFile","text":"threshold character integer scalar. minimum log level displayed. n integer scalar. Show last n log entries match threshold.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"super-classes-1","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to a file — AppenderFile","text":"lgr::Filterable -> lgr::Appender -> lgr::AppenderFile -> AppenderJson","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"methods-1","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to a file — AppenderFile","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$format() lgr::Appender$set_layout() lgr::Appender$set_threshold() lgr::AppenderFile$append() lgr::AppenderFile$set_file() lgr::AppenderFile$show()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"public-methods-1","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to a file — AppenderFile","text":"AppenderJson$new()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a file — AppenderFile","text":"","code":"AppenderJson$new(   file,   threshold = NA_integer_,   layout = LayoutJson$new(),   filters = NULL )"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log to a file — AppenderFile","text":"","code":"lg <- get_logger(\"test\") default <- tempfile() fancy <- tempfile() json <- tempfile()  lg$add_appender(AppenderFile$new(default), \"default\") lg$add_appender(   AppenderFile$new(fancy, layout = LayoutFormat$new(\"[%t] %c(): %L %m\")), \"fancy\" ) lg$add_appender(   AppenderFile$new(json, layout = LayoutJson$new()), \"json\" )  lg$info(\"A test message\") #> INFO  [08:04:14.650] A test message  readLines(default) #> [1] \"INFO  [2025-07-15 08:04:14.650] A test message\" readLines(fancy) #> [1] \"[2025-07-15 08:04:14.650] eval(): INFO  A test message\" readLines(json) #> [1] \"{\\\"level\\\":400,\\\"timestamp\\\":\\\"2025-07-15 08:04:14\\\",\\\"logger\\\":\\\"test\\\",\\\"caller\\\":\\\"eval\\\",\\\"msg\\\":\\\"A test message\\\"}\"  # cleanup lg$config(NULL) #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console unlink(default) unlink(fancy) unlink(json) tf <- tempfile() lg <- get_logger(\"test\")$   set_appenders(AppenderJson$new(tf))$   set_propagate(FALSE)  lg$info(\"A test message\") lg$info(\"A test message %s strings\", \"with format strings\", and = \"custom_fields\")  lg$appenders[[1]]$show() #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:14\",\"logger\":\"test\",\"caller\":\"eval\",\"msg\":\"A test message\"} #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:14\",\"logger\":\"test\",\"caller\":\"eval\",\"msg\":\"A test message with format strings strings\",\"and\":\"custom_fields\"} lg$appenders[[1]]$data #>   level           timestamp logger caller #> 1   400 2025-07-15 08:04:14   test   eval #> 2   400 2025-07-15 08:04:14   test   eval #>                                          msg           and #> 1                             A test message          <NA> #> 2 A test message with format strings strings custom_fields  # cleanup lg$config(NULL) #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console unlink(tf)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to a rotating file — AppenderFileRotating","title":"Log to a rotating file — AppenderFileRotating","text":"Log rotating file Log rotating file","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log to a rotating file — AppenderFileRotating","text":"extension AppenderFile rotates logfiles based certain conditions. Please refer documentation rotor::rotate() meanings extra arguments","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to a rotating file — AppenderFileRotating","text":"lgr::Filterable -> lgr::Appender -> lgr::AppenderFile -> AppenderFileRotating","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Log to a rotating file — AppenderFileRotating","text":"backups data.frame containing information path, file size, etc... available backups file.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to a rotating file — AppenderFileRotating","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$set_layout() lgr::Appender$set_threshold() lgr::AppenderFile$show()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to a rotating file — AppenderFileRotating","text":"AppenderFileRotating$new() AppenderFileRotating$append() AppenderFileRotating$rotate() AppenderFileRotating$prune() AppenderFileRotating$set_file() AppenderFileRotating$set_size() AppenderFileRotating$set_max_backups() AppenderFileRotating$set_compression() AppenderFileRotating$set_create_file() AppenderFileRotating$set_backup_dir() AppenderFileRotating$format() AppenderFileRotating$clone()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$new(   file,   threshold = NA_integer_,   layout = LayoutFormat$new(),   filters = NULL,   size = Inf,   max_backups = Inf,   compression = FALSE,   backup_dir = dirname(file),   create_file = NULL )"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a rotating file — AppenderFileRotating","text":"size, max_backups, compression, backup_dir, fmt see rotor::rotate() meaning arguments. Note fmt corresponds format backup_dir dir.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$append(event)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$rotate(force = FALSE)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$prune(max_backups = self$max_backups)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$set_file(file)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$set_size(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$set_max_backups(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$set_compression(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$set_create_file(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$set_backup_dir(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$format(color = false, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Log to a rotating file — AppenderFileRotating","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a rotating file — AppenderFileRotating","text":"","code":"AppenderFileRotating$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotating.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a rotating file — AppenderFileRotating","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to a date-stamped rotating file — AppenderFileRotatingDate","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"Log date-stamped rotating file Log date-stamped rotating file","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"simpler version AppenderFileRotatingTime timestamps need include sub-day accuracy.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"lgr::Filterable -> lgr::Appender -> lgr::AppenderFile -> lgr::AppenderFileRotating -> AppenderFileRotatingDate","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$set_layout() lgr::Appender$set_threshold() lgr::AppenderFile$show() lgr::AppenderFileRotating$append() lgr::AppenderFileRotating$prune() lgr::AppenderFileRotating$set_backup_dir() lgr::AppenderFileRotating$set_compression() lgr::AppenderFileRotating$set_create_file() lgr::AppenderFileRotating$set_file() lgr::AppenderFileRotating$set_max_backups() lgr::AppenderFileRotating$set_size() lgr::AppenderFileRotating$format() lgr::AppenderFileRotating$rotate() lgr::AppenderFileRotating$set_age() lgr::AppenderFileRotating$set_cache_backups() lgr::AppenderFileRotating$set_fmt() lgr::AppenderFileRotating$set_overwrite()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"AppenderFileRotatingDate$new() AppenderFileRotatingDate$clone()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"","code":"AppenderFileRotatingDate$new(   file,   threshold = NA_integer_,   layout = LayoutFormat$new(),   filters = NULL,   age = Inf,   size = -1,   max_backups = Inf,   compression = FALSE,   backup_dir = dirname(file),   fmt = \"%Y-%m-%d\",   overwrite = FALSE,   cache_backups = TRUE,   create_file = NULL )"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"size, age, max_backups, compression, backup_dir, fmt, overwrite, cache_backups see rotor::rotate_date() meaning arguments. Note fmt corresponds format ($format special meaning R6 classes).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"","code":"AppenderFileRotatingDate$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingDate.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a date-stamped rotating file — AppenderFileRotatingDate","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Log to a time-stamped rotating file — AppenderFileRotatingTime","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"Log time-stamped rotating file Log time-stamped rotating file","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"lgr::Filterable -> lgr::Appender -> lgr::AppenderFile -> lgr::AppenderFileRotating -> AppenderFileRotating","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"cache_backups TRUE FALSE. TRUE (default) list backups cached, FALSE read disk every time appender triggers. Caching brings significant speedup checking whether rotate based age last backup, safe programs/functions (except appender) interacting backups.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$set_layout() lgr::Appender$set_threshold() lgr::AppenderFile$show() lgr::AppenderFileRotating$append() lgr::AppenderFileRotating$prune() lgr::AppenderFileRotating$set_backup_dir() lgr::AppenderFileRotating$set_compression() lgr::AppenderFileRotating$set_create_file() lgr::AppenderFileRotating$set_file() lgr::AppenderFileRotating$set_max_backups() lgr::AppenderFileRotating$set_size()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"AppenderFileRotatingTime$new() AppenderFileRotatingTime$rotate() AppenderFileRotatingTime$set_age() AppenderFileRotatingTime$set_fmt() AppenderFileRotatingTime$set_overwrite() AppenderFileRotatingTime$set_cache_backups() AppenderFileRotatingTime$format() AppenderFileRotatingTime$clone()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$new(   file,   threshold = NA_integer_,   layout = LayoutFormat$new(),   filters = NULL,   age = Inf,   size = -1,   max_backups = Inf,   compression = FALSE,   backup_dir = dirname(file),   fmt = \"%Y-%m-%d--%H-%M-%S\",   overwrite = FALSE,   cache_backups = TRUE,   create_file = NULL )"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"size, age, max_backups, compression, backup_dir, fmt, overwrite, cache_backups see rotor::rotate_time() meaning arguments. Note fmt corresponds format backup_dir dir.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$rotate(force = FALSE, now = Sys.time())"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$set_age(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$set_fmt(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$set_overwrite(x)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"method-set-cache-backups-","dir":"Reference","previous_headings":"","what":"Method set_cache_backups()","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"set cache_backups flag.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$set_cache_backups(x)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"x logical scalar","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$format(color = FALSE, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"","code":"AppenderFileRotatingTime$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderFileRotatingTime.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log to a time-stamped rotating file — AppenderFileRotatingTime","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract class for logging to memory buffers — AppenderMemory","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"NOTE: abstract class. Abstract classes instantiated directly, exported package developers want extend lgr - example creating Appenders Layouts. Please refer see also section actual implementations class. AppenderMemory extended Appenders retain -memory event buffer, AppenderBuffer AppenderPushbullet lgrExtra package.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"lgr::Filterable -> lgr::Appender -> AppenderMemory","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"flush_on_exit logical scalar. buffer flushed Appender destroyed (e.g. R session terminated)? flush_on_rotate logical scalar. buffer flushed rotated $buffer_size exceeded? should_flush function exactly one arguments: event. $append() calls function internally current LogEvent flushes buffer evaluates TRUE. buffer_size integer scalar >= 0. Maximum number LogEvents buffer. flush_threshold numeric character threshold. LogEvents log_level equal lower threshold trigger flushing buffer. buffer_events list LogEvents. Contents buffer. buffer_events data.frame. Contents buffer converted data.frame. buffer_events data.frame. Contents buffer converted data.table.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$set_layout() lgr::Appender$set_threshold()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"AppenderMemory$new() AppenderMemory$append() AppenderMemory$flush() AppenderMemory$clear() AppenderMemory$set_buffer_size() AppenderMemory$set_should_flush() AppenderMemory$set_flush_on_exit() AppenderMemory$set_flush_on_rotate() AppenderMemory$set_flush_threshold() AppenderMemory$show() AppenderMemory$format()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$new(...)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$append(event)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-flush-","dir":"Reference","previous_headings":"","what":"Method flush()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"Sends buffer's contents attached Appenders clears Buffer","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$flush()"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-clear-","dir":"Reference","previous_headings":"","what":"Method clear()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"Clears buffer, discarding buffered Events","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$clear()"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-set-buffer-size-","dir":"Reference","previous_headings":"","what":"Method set_buffer_size()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"Set maximum size buffer","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$set_buffer_size(x)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"x integer scalar >= 0. Number LogEvents buffer.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-set-should-flush-","dir":"Reference","previous_headings":"","what":"Method set_should_flush()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"Set function can trigger flushing buffer","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$set_should_flush(x)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"x function single argument event. Setting x NULL shortcut function(event) FALSE. See active bindings.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-set-flush-on-exit-","dir":"Reference","previous_headings":"","what":"Method set_flush_on_exit()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"buffer flushed Appender destroyed?","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$set_flush_on_exit(x)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"x logical scalar. See active bindings.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-set-flush-on-rotate-","dir":"Reference","previous_headings":"","what":"Method set_flush_on_rotate()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"buffer flushed buffer_size exceeded?","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$set_flush_on_rotate(x)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"x logical scalar. See active bindings.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-set-flush-threshold-","dir":"Reference","previous_headings":"","what":"Method set_flush_threshold()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"Set threshold triggers flushing","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$set_flush_threshold(level)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"level numeric character threshold. See active bindings.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"method-show-","dir":"Reference","previous_headings":"","what":"Method show()","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"Display contents log table. Relies $format_event method Layout attached Appender.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$show(threshold = NA_integer_, n = 20L)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"threshold character integer scalar. minimum log level displayed. n integer scalar. Show last n log entries match threshold.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderMemory.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to memory buffers — AppenderMemory","text":"","code":"AppenderMemory$format(color = FALSE, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract class for logging to tabular structures — AppenderTable","title":"Abstract class for logging to tabular structures — AppenderTable","text":"NOTE: abstract class. Abstract classes instantiated directly, exported package developers want extend lgr - example creating Appenders Layouts. Please refer see also section actual implementations class. AppenderTable extended Appenders write data source can interpreted tables, (usually data.frame). Examples AppenderDbi, AppenderRjdbc AppenderDt lgrExtra package.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Abstract class for logging to tabular structures — AppenderTable","text":"lgr::Filterable -> lgr::Appender -> AppenderTable","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Abstract class for logging to tabular structures — AppenderTable","text":"data character scalar. Contents table, parsed data.frame. data character scalar. Like $data, returns data.table instead (requires data.table package).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Abstract class for logging to tabular structures — AppenderTable","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Appender$append() lgr::Appender$set_layout() lgr::Appender$set_threshold()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract class for logging to tabular structures — AppenderTable","text":"AppenderTable$new() AppenderTable$show() AppenderTable$format()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to tabular structures — AppenderTable","text":"","code":"AppenderTable$new(...)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"method-show-","dir":"Reference","previous_headings":"","what":"Method show()","title":"Abstract class for logging to tabular structures — AppenderTable","text":"Show recent log entries","code":""},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to tabular structures — AppenderTable","text":"","code":"AppenderTable$show(threshold = NA_integer_, n = 20L)"},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class for logging to tabular structures — AppenderTable","text":"threshold integer character threshold. show events log level threshold. n positive integer scalar. Show many entries","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/AppenderTable.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class for logging to tabular structures — AppenderTable","text":"","code":"AppenderTable$format(color = FALSE, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/CannotInitializeAbstractClassError.html","id":null,"dir":"Reference","previous_headings":"","what":"Logger Error Conditions — CannotInitializeAbstractClassError","title":"Logger Error Conditions — CannotInitializeAbstractClassError","text":"Logger Error Conditions","code":""},{"path":"https://s-fleck.github.io/lgr/reference/CannotInitializeAbstractClassError.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger Error Conditions — CannotInitializeAbstractClassError","text":"","code":"CannotInitializeAbstractClassError(class = parent.frame(2)[[\"classes\"]])"},{"path":"https://s-fleck.github.io/lgr/reference/CannotInitializeAbstractClassError.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger Error Conditions — CannotInitializeAbstractClassError","text":"class character scalar. abstract class mistakenly tried initialize. default discover class name automatically called inside $initialize(){...} R6::R6 class definition","code":""},{"path":"https://s-fleck.github.io/lgr/reference/CannotInitializeAbstractClassError.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logger Error Conditions — CannotInitializeAbstractClassError","text":"condition object","code":""},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Event Filters — EventFilter","title":"Event Filters — EventFilter","text":"EventFilters specify arbitrarily complex logic whether LogEvent processed Logger Appender. attached Loggers/Appenders via $set_filter() $add_filter() methods. EventFilter evaluates FALSE given event, event ignored - similarly pass objects' threshold. Usually need instantiate formal EventFilter object can just use function single argument event instead. need implement complex filter logic - example filter dependent dataset - might desirable subclass EventFilter, R6::R6 objects can store data functions together. .obj() special function can used within $filter() methods EventFilters. returns Logger Appender EventFilter attached .","code":""},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Filters — EventFilter","text":"","code":".obj()"},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"modifying-logevents-with-eventfilters","dir":"Reference","previous_headings":"","what":"Modifying LogEvents with EventFilters","title":"Event Filters — EventFilter","text":"Since LogEvents R6 objects reference semantics, EventFilters can abused modify events passing . lgr comes preset filters use property: FilterInject (similar with_log_level()) FilterForceLevel (similar with_log_value()). NOTE: base class Filters called EventFilter conflict base::Filter(). recommended convention Filter subclasses call FilterSomething leave Event prefix.","code":""},{"path":[]},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Event Filters — EventFilter","text":"EventFilter$new() EventFilter$clone()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Event Filters — EventFilter","text":"Initialize new EventFilter","code":""},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Filters — EventFilter","text":"","code":"EventFilter$new(fun = function(event) TRUE)"},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event Filters — EventFilter","text":"fun function single argument event must return either TRUE FALSE.  non-FALSE interpreted TRUE (= filtering takes place) warning thrown.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Event Filters — EventFilter","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Filters — EventFilter","text":"","code":"EventFilter$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event Filters — EventFilter","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/EventFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event Filters — EventFilter","text":"","code":"lg <- get_logger(\"test\") f <- function(event) {   cat(\"via event$.logger:\", event$.logger$threshold, \"\\n\")  #  works for loggers only   cat(\"via .obj():      \",.obj()$threshold, \"\\n\") # works for loggers and appenders   TRUE } lg$add_filter(f) lg$fatal(\"test\") #> via event$.logger: 400  #> via .obj():       400  #> FATAL [08:04:16.784] test lg$config(NULL) #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"Overrides log level  Appender/Logger filter attached level. See also with_log_level(). recommended use filters modify LogEvents Loggers, also work Appenders.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"lgr::EventFilter -> FilterForceLevel","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"level integer log level used override log levels LogEvent processed filter.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"FilterForceLevel$new() FilterForceLevel$clone()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"Initialize new FilterForceLevel","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"","code":"FilterForceLevel$new(level)"},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"level integer character log level","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"","code":"FilterForceLevel$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterForceLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Override the log level of all events processed by a Logger/Appender — FilterForceLevel","text":"","code":"lg <- get_logger(\"test\")  analyse <- function(){   lg$add_filter(FilterForceLevel$new(\"info\"), \"force\")   on.exit(lg$remove_filter(\"force\"))   lg$error(\"an error with forced log level INFO\") }  analyse() #> INFO  [08:04:16.973] an error with forced log level INFO lg$error(\"an normal error\") #> ERROR [08:04:16.974] an normal error lg$config(NULL)  # reset config #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject values into all events processed by a Logger/Appender — FilterInject","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"Inject arbitrary values LogEvents processed Logger/Appender. recommended use filters modify LogEvents Loggers, also work Appenders.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"lgr::EventFilter -> FilterInject","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"values named list values injected LogEvent processed filter","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"FilterInject$new() FilterInject$clone()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"Initialize new FilterInject","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"","code":"FilterInject$new(..., .list = list())"},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"..., .list number named R objects injected custom fields LogEvents processed Appender/Logger filter attached . See also with_log_value().","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"","code":"FilterInject$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/FilterInject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inject values into all events processed by a Logger/Appender — FilterInject","text":"","code":"lg <- get_logger(\"test\")  analyse <- function(){   lg$add_filter(FilterInject$new(type = \"analysis\"), \"inject\")   on.exit(lg$remove_filter(\"inject\"))   lg$error(\"an error with forced custom 'type'-field\") }  analyse() #> ERROR [08:04:17.145] an error with forced custom 'type'-field {type: `analysis`} lg$error(\"an normal error\") #> ERROR [08:04:17.150] an normal error lg$config(NULL)  # reset config #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Class for Filterables — Filterable","title":"Abstract Class for Filterables — Filterable","text":"Superclass classes $filter() method Appenders Loggers. See EventFilter details. NOTE: abstract class. Abstract classes instantiated directly, exported package developers want extend lgr - example creating Appenders Layouts. Please refer see also section actual implementations class.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Abstract Class for Filterables — Filterable","text":"filters list attached Filters.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract Class for Filterables — Filterable","text":"Filterable$filter() Filterable$add_filter() Filterable$remove_filter() Filterable$set_filters()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"method-filter-","dir":"Reference","previous_headings":"","what":"Method filter()","title":"Abstract Class for Filterables — Filterable","text":"Determine whether LogEvent x passed Appenders (TRUE) (FALSE). See also active binding filters.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Filterables — Filterable","text":"","code":"Filterable$filter(event)"},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Filterables — Filterable","text":"event LogEvent","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"method-add-filter-","dir":"Reference","previous_headings":"","what":"Method add_filter()","title":"Abstract Class for Filterables — Filterable","text":"Attach filter","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Filterables — Filterable","text":"","code":"Filterable$add_filter(filter, name = NULL)"},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Filterables — Filterable","text":"filter function single argument event returns TRUE FALSE; EventFilter R6::R6 object; R object $filter() method. Filter returns non-FALSE value, interpreted TRUE (= filtering takes place) warning thrown. name character scalar NULL. optional name makes easier access (remove) filter","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"method-remove-filter-","dir":"Reference","previous_headings":"","what":"Method remove_filter()","title":"Abstract Class for Filterables — Filterable","text":"Remove filter","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Filterables — Filterable","text":"","code":"Filterable$remove_filter(pos)"},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Filterables — Filterable","text":"pos character integer scalar. name index Filter removed.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"method-set-filters-","dir":"Reference","previous_headings":"","what":"Method set_filters()","title":"Abstract Class for Filterables — Filterable","text":"Set replace () Filters parent object. See EventFilter Filters work.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Filterables — Filterable","text":"","code":"Filterable$set_filters(filters)"},{"path":"https://s-fleck.github.io/lgr/reference/Filterable.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Filterables — Filterable","text":"filters list (named unnamed) EventFilters predicate functions. See is_filter().","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Class for Layouts — Layout","title":"Abstract Class for Layouts — Layout","text":"Abstract Class Layouts Abstract Class Layouts","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Abstract Class for Layouts — Layout","text":"Appenders pass LogEvents Layout formats output. Layouts included lgr means turning LogEvent character string. Appender exist one possible Layouts, every Layout work every Appender. See package lgrExtra examples Layouts return different data types (data.frames) Appenders can handle .","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"notes-for-developers","dir":"Reference","previous_headings":"","what":"Notes for developers","title":"Abstract Class for Layouts — Layout","text":"Layouts may additional $read(file, threshold, n) method returns character vector, /$parse(file) method returns data.frame. can used Appenders $show() methods $data active bindings respectively (see source code AppenderFile).","code":""},{"path":[]},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract Class for Layouts — Layout","text":"Layout$format_event() Layout$toString() Layout$clone()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"method-format-event-","dir":"Reference","previous_headings":"","what":"Method format_event()","title":"Abstract Class for Layouts — Layout","text":"Format log event Function Layout uses transform LogEvent something Appender can write output destination.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Layouts — Layout","text":"","code":"Layout$format_event(event)"},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Layouts — Layout","text":"event LogEvent","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Layouts — Layout","text":"","code":"Layout$toString()"},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Abstract Class for Layouts — Layout","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Layouts — Layout","text":"","code":"Layout$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/Layout.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Layouts — Layout","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Log Events as Text — LayoutFormat","title":"Format Log Events as Text — LayoutFormat","text":"Format Log Events Text Format Log Events Text","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format Log Events as Text — LayoutFormat","text":"Format LogEvent human readable text using format.LogEvent(), provides quick easy way customize log messages. need control flexibility, consider using LayoutGlue instead. see Fields see Fields see Fields see Fields Convert Layout character string Read log file written using LayoutFormat","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"format-tokens","dir":"Reference","previous_headings":"","what":"Format Tokens","title":"Format Log Events as Text — LayoutFormat","text":"list format tokens format.LogEvent() %t timestamp message, formatted according timestamp_fmt) %l log level, lowercase character representation %L log level, uppercase character representation %k log level, first letter lowercase character representation %K log level, first letter uppercase character representation %n log level, integer representation %g name logger %p PID (process ID). Useful logging code uses multiple threads. %c calling function %m log message %f custom fields x pseudo-JSON like format optimized human readability console output %j custom fields x proper JSON. requires jsonlite installed support colors opposed %f","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Format Log Events as Text — LayoutFormat","text":"lgr::Layout -> LayoutFormat","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Format Log Events as Text — LayoutFormat","text":"fmt character scalar containing format tokens. See format.LogEvent(). timestamp_fmt character scalar. See base::format.POSIXct(). colors named list functions (like ones provided package crayon) passed format.LogEvent(). pad_levels \"right\", \"left\" NULL. See format.LogEvent().","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Format Log Events as Text — LayoutFormat","text":"LayoutFormat$new() LayoutFormat$format_event() LayoutFormat$set_fmt() LayoutFormat$set_timestamp_fmt() LayoutFormat$set_colors() LayoutFormat$set_pad_levels() LayoutFormat$toString() LayoutFormat$read() LayoutFormat$clone()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$new(   fmt = \"%L [%t] %m %j\",   timestamp_fmt = \"%Y-%m-%d %H:%M:%OS3\",   colors = NULL,   pad_levels = \"right\" )"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"method-format-event-","dir":"Reference","previous_headings":"","what":"Method format_event()","title":"Format Log Events as Text — LayoutFormat","text":"Format LogEvent","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$format_event(event)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Log Events as Text — LayoutFormat","text":"event LogEvent","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$set_fmt(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$set_timestamp_fmt(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$set_colors(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$set_pad_levels(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$toString()"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$read(file, threshold = NA_integer_, n = 20L)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Log Events as Text — LayoutFormat","text":"threshold character integer threshold n number log entries display","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Format Log Events as Text — LayoutFormat","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text — LayoutFormat","text":"","code":"LayoutFormat$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Log Events as Text — LayoutFormat","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Log Events as Text — LayoutFormat","text":"","code":"# setup a dummy LogEvent event <- LogEvent$new(   logger = Logger$new(\"dummy logger\"),   level = 200,   timestamp = Sys.time(),   caller = NA_character_,   msg = \"a test message\" ) lo <- LayoutFormat$new() lo$format_event(event) #> [1] \"ERROR [2025-07-15 08:04:17.777] a test message\""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Log Events as Text via glue — LayoutGlue","title":"Format Log Events as Text via glue — LayoutGlue","text":"Format LogEvent human readable text using glue::glue. function evaluated environment access elements LogEvent (see examples). flexible LayoutFormat, also complex slightly less performant.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Format Log Events as Text via glue — LayoutGlue","text":"lgr::Layout -> LayoutGlue","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Format Log Events as Text via glue — LayoutGlue","text":"fmt string interpreted glue::glue()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Format Log Events as Text via glue — LayoutGlue","text":"LayoutGlue$new() LayoutGlue$format_event() LayoutGlue$set_fmt() LayoutGlue$set_colors() LayoutGlue$toString() LayoutGlue$clone()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text via glue — LayoutGlue","text":"","code":"LayoutGlue$new(   fmt = \"{pad_right(colorize_levels(toupper(level_name)), 5)} [{timestamp}] {msg}\" )"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text via glue — LayoutGlue","text":"","code":"LayoutGlue$format_event(event)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text via glue — LayoutGlue","text":"","code":"LayoutGlue$set_fmt(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text via glue — LayoutGlue","text":"","code":"LayoutGlue$set_colors(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text via glue — LayoutGlue","text":"","code":"LayoutGlue$toString()"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Format Log Events as Text via glue — LayoutGlue","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Log Events as Text via glue — LayoutGlue","text":"","code":"LayoutGlue$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Log Events as Text via glue — LayoutGlue","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutGlue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Log Events as Text via glue — LayoutGlue","text":"","code":"lg <- get_logger(\"test\")$   set_appenders(AppenderConsole$new())$   set_propagate(FALSE)  lg$appenders[[1]]$set_layout(LayoutGlue$new()) lg$fatal(\"test\") #> FATAL [2025-07-15 08:04:18.364998] test   # All fields of the LogEvent are available, even custom ones lg$appenders[[1]]$layout$set_fmt(   \"{logger} {level_name}({level}) {caller}: {toupper(msg)} {{custom: {custom}}}\" ) lg$fatal(\"test\", custom = \"foobar\") #> test fatal(100) eval: TEST {custom: foobar} lg$config(NULL)  # reset logger config #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":null,"dir":"Reference","previous_headings":"","what":"Format LogEvents as JSON — LayoutJson","title":"Format LogEvents as JSON — LayoutJson","text":"format formatting LogEvents jsonlines log files. provides nice balance human- machine-readability.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Format LogEvents as JSON — LayoutJson","text":"lgr::Layout -> LayoutJson","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Format LogEvents as JSON — LayoutJson","text":"toJSON_args list values passed jsonlite::toJSON() timestamp_fmt Used  $format_event() format timestamps.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Format LogEvents as JSON — LayoutJson","text":"LayoutJson$new() LayoutJson$format_event() LayoutJson$set_toJSON_args() LayoutJson$set_timestamp_fmt() LayoutJson$toString() LayoutJson$parse() LayoutJson$read() LayoutJson$clone()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$new(toJSON_args = list(auto_unbox = TRUE), timestamp_fmt = NULL)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$format_event(event)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"method-set-tojson-args-","dir":"Reference","previous_headings":"","what":"Method set_toJSON_args()","title":"Format LogEvents as JSON — LayoutJson","text":"Set arguments pass jsonlite::toJSON()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$set_toJSON_args(x)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format LogEvents as JSON — LayoutJson","text":"x named list","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"method-set-timestamp-fmt-","dir":"Reference","previous_headings":"","what":"Method set_timestamp_fmt()","title":"Format LogEvents as JSON — LayoutJson","text":"Set format Layout apply timestamps.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$set_timestamp_fmt(x)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format LogEvents as JSON — LayoutJson","text":"x NULL (default): formatting timestamp left jsonlite::toJSON(), character scalar format.POSIXct(), function returns vector length (POSIXct) input. returned vector can type supported jsonlite::toJSON(), usually character.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$toString()"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$parse(file)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$read(file, threshold = NA_integer_, n = 20L)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Format LogEvents as JSON — LayoutJson","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"LayoutJson$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format LogEvents as JSON — LayoutJson","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LayoutJson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format LogEvents as JSON — LayoutJson","text":"","code":"# setup a dummy LogEvent event <- LogEvent$new(   logger = Logger$new(\"dummy logger\"),   level = 200,   timestamp = Sys.time(),   caller = NA_character_,   msg = \"a test message\",   custom_field = \"LayoutJson can handle arbitrary fields\" )  # Default settings show all event fals lo <- LayoutJson$new() lo$format_event(event) #> {\"level\":200,\"timestamp\":\"2025-07-15 08:04:18\",\"logger\":\"dummy logger\",\"caller\":null,\"msg\":\"a test message\",\"custom_field\":\"LayoutJson can handle arbitrary fields\"}"},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"LogEvents - The atomic unit of logging — LogEvent","title":"LogEvents - The atomic unit of logging — LogEvent","text":"LogEvent single unit data logged. LogEvents usually created Logger, processed one Appenders. need instantiated manually except testing experimentation; however, plan writing Appenders Layouts need understand LogEvents.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"LogEvents - The atomic unit of logging — LogEvent","text":"level integer. log_level / priority LogEvent. Use active binding level_name get character representation instead. timestamp POSIXct. time LogEvent created. caller character. name calling function. msg character. log message. .logger Logger. reference Logger created event (equivalent get_logger(event$logger)). .rawMsg character. raw log message without string interpolation.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"LogEvents - The atomic unit of logging — LogEvent","text":"values list. values stored LogEvent, including custom fields, including event$.logger event$.rawMsg. level_name character. log_level / priority LogEvent labelled according getOption(\"lgr.log_levels\") logger character scalar. name Logger created event, equivalent event$.logger$name)","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"LogEvents - The atomic unit of logging — LogEvent","text":"LogEvent$new() LogEvent$clone()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"LogEvents - The atomic unit of logging — LogEvent","text":"arguments LogEvent$new() directly translate fields stored LogEvent. Usually values scalars, (except \"logger\") can also vectors length (scalars recycled). case event treated Appenders Layouts several separate events.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogEvents - The atomic unit of logging — LogEvent","text":"","code":"LogEvent$new(   logger,   level = 400,   timestamp = Sys.time(),   caller = NA,   msg = NA,   .rawMsg = msg,   ... )"},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogEvents - The atomic unit of logging — LogEvent","text":"logger, level, timestamp, caller, msg see Public fields. ... named arguments ... added LogEvent custom fields. can store arbitrary R objects LogEvents way, Appenders support . See AppenderJson ","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"LogEvents - The atomic unit of logging — LogEvent","text":"objects class cloneable method.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"LogEvents - The atomic unit of logging — LogEvent","text":"","code":"LogEvent$clone(deep = FALSE)"},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogEvents - The atomic unit of logging — LogEvent","text":"deep Whether make deep clone.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LogEvent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogEvents - The atomic unit of logging — LogEvent","text":"","code":"lg <- get_logger(\"test\") lg$error(\"foo bar\") #> ERROR [08:04:19.448] foo bar  # The last LogEvent produced by a Logger is stored in its `last_event` field lg$last_event  # formatted console output #> ERROR [2025-07-15 08:04:19] foo bar lg$last_event$values  # values stored in the event #> $level #> [1] 200 #>  #> $timestamp #> [1] \"2025-07-15 08:04:19 UTC\" #>  #> $logger #> [1] \"test\" #>  #> $caller #> [1] \"eval\" #>  #> $msg #> [1] \"foo bar\" #>  #> $rawMsg #> [1] \"foo bar\" #>   # Also contains the Logger that created it as .logger lg$last_event$logger #> [1] \"test\" # equivalent to lg$last_event$.logger$name #> [1] \"test\"  # This is really a reference to the complete Logger, so the following is # possible (though nonsensical) lg$last_event$.logger$last_event$msg #> [1] \"foo bar\" identical(lg, lg$last_event$.logger) #> [1] TRUE lg$config(NULL)  # reset logger config #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Loggers — Logger","title":"Loggers — Logger","text":"Logger produces LogEvent contains log message along metadata (timestamp, calling function, ...) dispatches one Appenders responsible output (console, file, ...) event. lgr comes single pre-configured Logger called root Logger can accessed via lgr$<...>. Instantiation new Loggers done get_logger(). advisable instantiate separate Logger descriptive name package/script use lgr.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Loggers — Logger","text":"package developer define new Logger package, need configure . user package decide output logging, usually configuring root Logger (new Appenders added/removed, Layouts modified, etc...).","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Loggers — Logger","text":"lgr::Filterable -> Logger","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Loggers — Logger","text":"name character scalar. unique name logger, also includes names ancestors (separated /). threshold integer scalar. threshold Logger, NULL threshold inherits closest ancestor non-NULL threshold propagate TRUE FALSE. Logger propagate events Appenders ancestors? ancestry named logical vector containing propagate value Logger upper inheritance tree. names names appenders. ancestry S3 class custom format()/print() method, want use plain logical vector use unclass(lg$ancestry) parent Logger. direct ancestor Logger. last_event last LogEvent produced current Logger appenders list Appenders Logger inherited_appenders list appenders Logger inherits ancestors exception_handler function. See $set_exception_handler $handle_exception","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Loggers — Logger","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Loggers — Logger","text":"Logger$new() Logger$log() Logger$fatal() Logger$error() Logger$warn() Logger$info() Logger$debug() Logger$trace() Logger$list_log() Logger$config() Logger$add_appender() Logger$remove_appender() Logger$handle_exception() Logger$set_exception_handler() Logger$set_propagate() Logger$set_threshold() Logger$set_appenders() Logger$spawn()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Loggers — Logger","text":"Loggers never instantiated directly Logger$new() rather via get_logger(\"name\"). way new Loggers registered global namespace ensures uniqueness facilitates inheritance Loggers. \"name\" exist, new Logger name created, otherwise function returns Reference existing Logger. name potentially \"/\" separated hierarchical value like foo/bar/baz. Loggers hierarchy descendants loggers (default) inherit threshold Appenders ancestors.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$new(   name = \"(unnamed logger)\",   appenders = list(),   threshold = NULL,   filters = list(),   exception_handler = default_exception_handler,   propagate = TRUE )"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"name, appenders, threshold, filters, exception_handler, propagate See section Active bindings.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-log-","dir":"Reference","previous_headings":"","what":"Method log()","title":"Loggers — Logger","text":"Log event. level passes Logger's threshold new LogEvent level, msg, timestamp caller created.  new LogEvent also passes Loggers Filters, dispatched relevant Appenders.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$log(level, msg, ..., timestamp = Sys.time(), caller = get_caller(-7))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"level character integer scalar. See log_levels. msg character. log message. unnamed arguments supplied ..., msg passed base::sprintf() (means \"%\" escaped), otherwise msg left -. ... unnamed arguments ... must character scalars passed base::sprintf(). Named arguments must unique names can arbitrary R objects passed LogEvent$new() turned custom fields. timestamp POSIXct. Timestamp event. caller character scalar. name calling function.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-fatal-","dir":"Reference","previous_headings":"","what":"Method fatal()","title":"Loggers — Logger","text":"Log Event fatal priority","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$fatal(msg, ..., caller = get_caller(-8L))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"msg, ..., caller see $log()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-error-","dir":"Reference","previous_headings":"","what":"Method error()","title":"Loggers — Logger","text":"Log Event error priority","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$error(msg, ..., caller = get_caller(-8L))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"msg, ..., caller see $log()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-warn-","dir":"Reference","previous_headings":"","what":"Method warn()","title":"Loggers — Logger","text":"Log Event warn priority","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$warn(msg, ..., caller = get_caller(-8L))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"msg, ..., caller see $log()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-info-","dir":"Reference","previous_headings":"","what":"Method info()","title":"Loggers — Logger","text":"Log Event info priority","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$info(msg, ..., caller = get_caller(-8L))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"msg, ..., caller see $log()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-debug-","dir":"Reference","previous_headings":"","what":"Method debug()","title":"Loggers — Logger","text":"Log Event debug priority","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$debug(msg, ..., caller = get_caller(-8L))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"msg, ..., caller see $log()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-trace-","dir":"Reference","previous_headings":"","what":"Method trace()","title":"Loggers — Logger","text":"Log Event trace priority","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$trace(msg, ..., caller = get_caller(-8L))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"msg, ..., caller see $log()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-list-log-","dir":"Reference","previous_headings":"","what":"Method list_log()","title":"Loggers — Logger","text":"list_log() shortcut .call(Logger$log, x). See https://github.com/s-fleck/joblog R package leverages feature create custom log event types tracking status cron jobs.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$list_log(x)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"x named list must least contain named elements level timestamp","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loggers — Logger","text":"","code":"lg <- get_logger(\"test\") lg$list_log(list(level = 400, msg = \"example\"))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-config-","dir":"Reference","previous_headings":"","what":"Method config()","title":"Loggers — Logger","text":"Load Logger configuration.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$config(cfg, file, text, list)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"cfg special list object following elements: appenders, threshold, filters, propagate, exception_handler, path YAML/JSON config file, character scalar containing YAML/JSON, NULL (reset logger config default/unconfigured state) file, text, list can used alternative cfg  enforces  supplied  argument specified type. See logger_config details.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-add-appender-","dir":"Reference","previous_headings":"","what":"Method add_appender()","title":"Loggers — Logger","text":"Add Appender Logger","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$add_appender(appender, name = NULL)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"appender single Appender name character scalar. Optional recommended.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Loggers — Logger","text":"","code":"lg <- get_logger(\"test\") lg$add_appender(AppenderConsole$new(), name = \"myconsole\") lg$appenders[[1]] lg$appenders$myconsole lg$remove_appender(\"myconsole\") lg$config(NULL)  # reset config"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-remove-appender-","dir":"Reference","previous_headings":"","what":"Method remove_appender()","title":"Loggers — Logger","text":"remove appender","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$remove_appender(pos)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"pos integer index character name Appender(s) remove","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-handle-exception-","dir":"Reference","previous_headings":"","what":"Method handle_exception()","title":"Loggers — Logger","text":"prevent errors logging logic crashing whole script, Loggers pass errors encounter exception handler. default behaviour demote errors warnings. See also set_exception_handler().","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$handle_exception(expr)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"expr expression evaluated.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-set-exception-handler-","dir":"Reference","previous_headings":"","what":"Method set_exception_handler()","title":"Loggers — Logger","text":"Set exception handler logger","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$set_exception_handler(fun)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"fun function single argument e (error condition)","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Loggers — Logger","text":"","code":"lgr$info(stop(\"this produces a warning instead of an error\"))"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-set-propagate-","dir":"Reference","previous_headings":"","what":"Method set_propagate()","title":"Loggers — Logger","text":"Logger propagate events Appenders ancestors?","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$set_propagate(x)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"x TRUE FALSE. LogEvents passed appenders ancestral Loggers?","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-set-threshold-","dir":"Reference","previous_headings":"","what":"Method set_threshold()","title":"Loggers — Logger","text":"Set minimum log level events Logger process","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$set_threshold(level)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"level character integer scalar. minimum log level triggers Logger","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-set-appenders-","dir":"Reference","previous_headings":"","what":"Method set_appenders()","title":"Loggers — Logger","text":"Set Logger's Appenders","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$set_appenders(x)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"x single Appender list thereof. Appenders control output Logger. aware Logger also inherits Appenders ancestors (see vignette(\"lgr\", package = \"lgr\") info Logger inheritance).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"method-spawn-","dir":"Reference","previous_headings":"","what":"Method spawn()","title":"Loggers — Logger","text":"Spawn child Logger. similar using get_logger(), can useful cases Loggers created programmatically","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggers — Logger","text":"","code":"Logger$spawn(name)"},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loggers — Logger","text":"name character vector. Name child logger get_logger(\"foo/bar\")$spawn(\"baz\") equivalent get_logger(\"foo/bar/baz\")","code":""},{"path":"https://s-fleck.github.io/lgr/reference/Logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loggers — Logger","text":"","code":"# lgr::lgr is the root logger that is always available lgr$info(\"Today is a good day\") #> INFO  [08:04:19.683] Today is a good day lgr$fatal(\"This is a serious error\") #> FATAL [08:04:19.685] This is a serious error  # Loggers use sprintf() for string formatting by default lgr$info(\"Today is %s\", Sys.Date() ) #> INFO  [08:04:19.686] Today is 2025-07-15  # If no unnamed `...` are present, msg is not passed through sprintf() lgr$fatal(\"100% bad\")  # so this works #> FATAL [08:04:19.687] 100% bad lgr$fatal(\"%s%% bad\", 100)  # if you use unnamed arguments, you must escape % #> FATAL [08:04:19.688] 100% bad  # You can create new loggers with get_logger() tf <- tempfile() lg <- get_logger(\"mylogger\")$set_appenders(AppenderFile$new(tf))  # The new logger passes the log message on to the appenders of its parent # logger, which is by default the root logger. This is why the following # writes not only the file 'tf', but also to the console. lg$fatal(\"blubb\") #> FATAL [08:04:19.692] blubb readLines(tf) #> [1] \"FATAL [2025-07-15 08:04:19.692] blubb\"  # This logger's print() method depicts this relationship. child <- get_logger(\"lg/child\") print(child) #> <Logger> [info] lg/child #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console print(child$name) #> [1] \"lg/child\"  # use formatting strings and custom fields tf2 <- tempfile() lg$add_appender(AppenderFile$new(tf2, layout = LayoutJson$new())) lg$info(\"Not all %s support custom fields\", \"appenders\", type = \"test\") #> INFO  [08:04:19.698] Not all appenders support custom fields {type: `test`} cat(readLines(tf), sep = \"\\n\") #> FATAL [2025-07-15 08:04:19.692] blubb #> INFO  [2025-07-15 08:04:19.698] Not all appenders support custom fields {\"type\":\"test\"} cat(readLines(tf2), sep = \"\\n\") #> {\"level\":400,\"timestamp\":\"2025-07-15 08:04:19\",\"logger\":\"mylogger\",\"caller\":\"eval\",\"msg\":\"Not all appenders support custom fields\",\"type\":\"test\"}  # cleanup unlink(c(tf, tf2)) lg$config(NULL)  # reset logger config #> <Logger> [info] mylogger #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  # LoggerGlue # You can also create a new logger that uses the awesome glue library for # string formatting instead of sprintf  if (requireNamespace(\"glue\")){    lg <- get_logger_glue(\"glue\")   lg$fatal(\"blah \", \"fizz is set to: {fizz}\", foo = \"bar\", fizz = \"buzz\")   # prevent creation of custom fields with prefixing a dot   lg$fatal(\"blah \", \"fizz is set to: {.fizz}\", foo = \"bar\", .fizz = \"buzz\")    #' # completely reset 'glue' to an unconfigured vanilla Logger   get_logger(\"glue\", reset = TRUE)  } #> FATAL [08:04:19.707] blah fizz is set to: buzz {foo: `bar`, fizz: `buzz`} #> FATAL [08:04:19.752] blah fizz is set to: buzz {foo: `bar`} #> <Logger> [info] glue #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console   # Configuring a Logger lg <- get_logger(\"test\") lg$config(NULL)  # resets logger to unconfigured state #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  # With setters lg$   set_threshold(\"error\")$   set_propagate(FALSE)$   set_appenders(AppenderConsole$new(threshold = \"info\"))  lg$config(NULL) #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  # With a list lg$config(list(   threshold = \"error\",   propagate = FALSE,   appenders = list(AppenderConsole$new(threshold = \"info\")) )) #> <Logger> [error] test #>  #> appenders: #>   [[1]]: <AppenderConsole> [info] -> console  lg$config(NULL)  # resets logger to unconfigured state #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  # Via YAML cfg <- \" Logger:   threshold: error   propagate: false   appenders:     AppenderConsole:       threshold: info \"  lg$config(cfg) #> <Logger> [error] test #>  #> appenders: #>   AppenderConsole: <AppenderConsole> [info] -> console lg$config(NULL) #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  ## ------------------------------------------------ ## Method `Logger$list_log` ## ------------------------------------------------  lg <- get_logger(\"test\") lg$list_log(list(level = 400, msg = \"example\")) #> INFO  [08:04:19.767] example  ## ------------------------------------------------ ## Method `Logger$add_appender` ## ------------------------------------------------  lg <- get_logger(\"test\") lg$add_appender(AppenderConsole$new(), name = \"myconsole\") lg$appenders[[1]] #> <AppenderConsole> [all] #>   layout: <LayoutFormat> %L [%t] %m %f #>   destination: console lg$appenders$myconsole #> <AppenderConsole> [all] #>   layout: <LayoutFormat> %L [%t] %m %f #>   destination: console lg$remove_appender(\"myconsole\") lg$config(NULL)  # reset config #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  ## ------------------------------------------------ ## Method `Logger$set_exception_handler` ## ------------------------------------------------  lgr$info(stop(\"this produces a warning instead of an error\")) #> Warning: [2025-07-15 08:04:19.781] root ~ error in `lgr$info(stop(\"this produces a warning instead of an error\"))`: this produces a warning instead of an error"},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":null,"dir":"Reference","previous_headings":"","what":"LoggerGlue — LoggerGlue","title":"LoggerGlue — LoggerGlue","text":"LoggerGlue uses glue::glue() instead base::sprintf() construct log messages. glue well designed package string interpolation. makes composing log messages flexible comfortable price additional dependency slightly less performance sprintf().","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LoggerGlue — LoggerGlue","text":"glue() lets define temporary named variables inside call. normal Logger, named arguments get turned custom fields; however, can suppress behaviour making named argument start \".\". Please refer vignette(\"lgr\", package = \"lgr\") examples.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"LoggerGlue — LoggerGlue","text":"lgr::Filterable -> lgr::Logger -> LoggerGlue","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"LoggerGlue — LoggerGlue","text":"lgr::Filterable$add_filter() lgr::Filterable$filter() lgr::Filterable$remove_filter() lgr::Filterable$set_filters() lgr::Logger$add_appender() lgr::Logger$config() lgr::Logger$handle_exception() lgr::Logger$initialize() lgr::Logger$remove_appender() lgr::Logger$set_appenders() lgr::Logger$set_exception_handler() lgr::Logger$set_propagate() lgr::Logger$set_threshold()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"LoggerGlue — LoggerGlue","text":"LoggerGlue$fatal() LoggerGlue$error() LoggerGlue$warn() LoggerGlue$info() LoggerGlue$debug() LoggerGlue$trace() LoggerGlue$log() LoggerGlue$list_log() LoggerGlue$spawn()","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$fatal(..., caller = get_caller(-8L), .envir = parent.frame())"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$error(..., caller = get_caller(-8L), .envir = parent.frame())"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$warn(..., caller = get_caller(-8L), .envir = parent.frame())"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$info(..., caller = get_caller(-8L), .envir = parent.frame())"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$debug(..., caller = get_caller(-8L), .envir = parent.frame())"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$trace(..., caller = get_caller(-8L), .envir = parent.frame())"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$log(   level,   ...,   timestamp = Sys.time(),   caller = get_caller(-7),   .envir = parent.frame() )"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$list_log(x)"},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/LoggerGlue.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerGlue — LoggerGlue","text":"","code":"LoggerGlue$spawn(name)"},{"path":"https://s-fleck.github.io/lgr/reference/as.data.frame.LogEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce LogEvents to Data Frames — as.data.frame.LogEvent","title":"Coerce LogEvents to Data Frames — as.data.frame.LogEvent","text":"Coerce LogEvents data.frames, data.tables, tibbles.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/as.data.frame.LogEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce LogEvents to Data Frames — as.data.frame.LogEvent","text":"","code":"# S3 method for class 'LogEvent' as.data.frame(   x,   row.names = NULL,   optional = FALSE,   stringsAsFactors = FALSE,   ...,   box_if = function(.) !(is.atomic(.) && identical(length(.), 1L)),   cols_expand = NULL )  as.data.table.LogEvent(   x,   ...,   box_if = function(.) !(is.atomic(.) && identical(length(.), 1L)),   cols_expand = \"msg\" )  as_tibble.LogEvent(   x,   ...,   box_if = function(.) !(is.atomic(.) && identical(length(.), 1L)),   cols_expand = \"msg\" )"},{"path":"https://s-fleck.github.io/lgr/reference/as.data.frame.LogEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce LogEvents to Data Frames — as.data.frame.LogEvent","text":"x R object. row.names NULL character vector giving row     names data frame.  Missing values allowed. optional currently ignored included compatibility. stringsAsFactors logical scalar: character vectors converted factors? Defaults FALSE (opposed base::.data.frame()) included compatibility. ... passed data.frame() box_if function returns TRUE FALSE determine values boxed (.e. placed single elements list column). See example cols_expand character vector. Columns box (even box_if() returns TRUE). Vectors columns result multiple rows result (rather single list-column row). defaults \"msg\" vectorized logging log message.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/as.data.frame.LogEvent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce LogEvents to Data Frames — as.data.frame.LogEvent","text":"","code":"lg <- get_logger(\"test\") lg$info(\"lorem ipsum\") #> INFO  [08:04:23.323] lorem ipsum as.data.frame(lg$last_event) #>   level           timestamp logger caller         msg      rawMsg #> 1   400 2025-07-15 08:04:23   test   eval lorem ipsum lorem ipsum  lg$info(\"LogEvents can store any custom log values\", df = iris) #> INFO  [08:04:23.326] LogEvents can store any custom log values {df: <data.frame 150x5>} as.data.frame(lg$last_event) #>   level           timestamp logger caller #> 1   400 2025-07-15 08:04:23   test   eval #>                                         msg #> 1 LogEvents can store any custom log values #>                                      rawMsg           df #> 1 LogEvents can store any custom log values c(5.1, 4.... head(as.data.frame(lg$last_event)$df[[1]]) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # how boxing works  # by default non-scalars are boxed lg$info(\"letters\", letters = letters) #> INFO  [08:04:23.346] letters {letters: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)} as.data.frame(lg$last_event) #>   level           timestamp logger caller     msg  rawMsg      letters #> 1   400 2025-07-15 08:04:23   test   eval letters letters a, b, c,....  # this behaviour can be modified by supplying a custom boxing function as.data.frame(lg$last_event, box_if = function(.) FALSE) #>    level           timestamp logger caller     msg  rawMsg letters #> 1    400 2025-07-15 08:04:23   test   eval letters letters       a #> 2    400 2025-07-15 08:04:23   test   eval letters letters       b #> 3    400 2025-07-15 08:04:23   test   eval letters letters       c #> 4    400 2025-07-15 08:04:23   test   eval letters letters       d #> 5    400 2025-07-15 08:04:23   test   eval letters letters       e #> 6    400 2025-07-15 08:04:23   test   eval letters letters       f #> 7    400 2025-07-15 08:04:23   test   eval letters letters       g #> 8    400 2025-07-15 08:04:23   test   eval letters letters       h #> 9    400 2025-07-15 08:04:23   test   eval letters letters       i #> 10   400 2025-07-15 08:04:23   test   eval letters letters       j #> 11   400 2025-07-15 08:04:23   test   eval letters letters       k #> 12   400 2025-07-15 08:04:23   test   eval letters letters       l #> 13   400 2025-07-15 08:04:23   test   eval letters letters       m #> 14   400 2025-07-15 08:04:23   test   eval letters letters       n #> 15   400 2025-07-15 08:04:23   test   eval letters letters       o #> 16   400 2025-07-15 08:04:23   test   eval letters letters       p #> 17   400 2025-07-15 08:04:23   test   eval letters letters       q #> 18   400 2025-07-15 08:04:23   test   eval letters letters       r #> 19   400 2025-07-15 08:04:23   test   eval letters letters       s #> 20   400 2025-07-15 08:04:23   test   eval letters letters       t #> 21   400 2025-07-15 08:04:23   test   eval letters letters       u #> 22   400 2025-07-15 08:04:23   test   eval letters letters       v #> 23   400 2025-07-15 08:04:23   test   eval letters letters       w #> 24   400 2025-07-15 08:04:23   test   eval letters letters       x #> 25   400 2025-07-15 08:04:23   test   eval letters letters       y #> 26   400 2025-07-15 08:04:23   test   eval letters letters       z as.data.frame(lg$last_event, cols_expand = \"letters\") #>    level           timestamp logger caller     msg  rawMsg letters #> 1    400 2025-07-15 08:04:23   test   eval letters letters       a #> 2    400 2025-07-15 08:04:23   test   eval letters letters       b #> 3    400 2025-07-15 08:04:23   test   eval letters letters       c #> 4    400 2025-07-15 08:04:23   test   eval letters letters       d #> 5    400 2025-07-15 08:04:23   test   eval letters letters       e #> 6    400 2025-07-15 08:04:23   test   eval letters letters       f #> 7    400 2025-07-15 08:04:23   test   eval letters letters       g #> 8    400 2025-07-15 08:04:23   test   eval letters letters       h #> 9    400 2025-07-15 08:04:23   test   eval letters letters       i #> 10   400 2025-07-15 08:04:23   test   eval letters letters       j #> 11   400 2025-07-15 08:04:23   test   eval letters letters       k #> 12   400 2025-07-15 08:04:23   test   eval letters letters       l #> 13   400 2025-07-15 08:04:23   test   eval letters letters       m #> 14   400 2025-07-15 08:04:23   test   eval letters letters       n #> 15   400 2025-07-15 08:04:23   test   eval letters letters       o #> 16   400 2025-07-15 08:04:23   test   eval letters letters       p #> 17   400 2025-07-15 08:04:23   test   eval letters letters       q #> 18   400 2025-07-15 08:04:23   test   eval letters letters       r #> 19   400 2025-07-15 08:04:23   test   eval letters letters       s #> 20   400 2025-07-15 08:04:23   test   eval letters letters       t #> 21   400 2025-07-15 08:04:23   test   eval letters letters       u #> 22   400 2025-07-15 08:04:23   test   eval letters letters       v #> 23   400 2025-07-15 08:04:23   test   eval letters letters       w #> 24   400 2025-07-15 08:04:23   test   eval letters letters       x #> 25   400 2025-07-15 08:04:23   test   eval letters letters       y #> 26   400 2025-07-15 08:04:23   test   eval letters letters       z  # The `msg` argument of a log event is always vectorized lg$info(c(\"a vectorized\", \"log message\")) #> INFO  [08:04:23.353] a vectorized #> INFO  [08:04:23.353] log message as.data.frame(lg$last_event) #>   level    timestamp logger caller msg.c..a.vectorized....log.message.. #> 1   400 2025-07-....   test   eval                         a vectorized #> 2   400 2025-07-....   test   eval                          log message #>   msg.c..a.vectorized....log.message...1       rawMsg #> 1                           a vectorized a vector.... #> 2                            log message a vector....  lg$config(NULL) #> <Logger> [info] test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/as_LogEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce objects to LogEvent — as_LogEvent","title":"Coerce objects to LogEvent — as_LogEvent","text":"Smartly coerce R objects look like LogEvents LogEvents. Mainly useful developing Appenders.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/as_LogEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce objects to LogEvent — as_LogEvent","text":"","code":"as_LogEvent(x, ...)  # S3 method for class 'list' as_LogEvent(x, ...)  # S3 method for class 'data.frame' as_LogEvent(x, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/as_LogEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce objects to LogEvent — as_LogEvent","text":"x supported R object ... currently ignored","code":""},{"path":"https://s-fleck.github.io/lgr/reference/as_LogEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce objects to LogEvent — as_LogEvent","text":"LogEvent","code":""},{"path":"https://s-fleck.github.io/lgr/reference/as_LogEvent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce objects to LogEvent — as_LogEvent","text":"Note: as_LogEvent.data.frame() supports single-row data.frames","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/basic_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Setup for the Logging System — basic_config","title":"Basic Setup for the Logging System — basic_config","text":"quick easy way configure root logger. less powerful using lgr$config() lgr$set_*() (see Logger), reduces common configurations single line code.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/basic_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Setup for the Logging System — basic_config","text":"","code":"basic_config(   file = NULL,   fmt = \"%L [%t] %m\",   timestamp_fmt = \"%Y-%m-%d %H:%M:%OS3\",   threshold = \"info\",   appenders = NULL,   console = if (is.null(appenders)) \"all\" else FALSE,   console_fmt = \"%L [%t] %m %f\",   console_timestamp_fmt = \"%H:%M:%OS3\",   console_connection = NULL,   memory = FALSE )"},{"path":"https://s-fleck.github.io/lgr/reference/basic_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Setup for the Logging System — basic_config","text":"file character scalar: NULL AppenderFile created logs file. filename ends .jsonl, Appender set use JSON Lines format instead plain text (see AppenderFile AppenderJson). fmt character scalar: Format use file supplied .jsonl file. NULL defaults \"%L [%t] %m\" (see format.LogEvent) timestamp_fmt see format.POSIXct() threshold character integer scalar. minimum log level processed root logger. appenders single Appender list thereof. console logical scalar threshold (see ). Add appender logs console (.e. displays messages interactive R session) console_fmt character scalar: like fmt used console output console_timestamp_fmt character scalar: like timestamp_fmt used console output console_connection see cat() file argument. memory logical scalar. threshold (see ). Add Appender logs memory buffer, see also show_log() AppenderBuffer","code":""},{"path":"https://s-fleck.github.io/lgr/reference/basic_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Setup for the Logging System — basic_config","text":"root Logger (lgr)","code":""},{"path":"https://s-fleck.github.io/lgr/reference/basic_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic Setup for the Logging System — basic_config","text":"","code":"# log to a file basic_config(file = tempfile()) #> <LoggerRoot> [info] root #>  #> appenders: #>   file   : <AppenderFile>    [all] -> /tmp/RtmpxWHygX/file1c5b9fd3939 #>   console: <AppenderConsole> [all] -> console unlink(lgr$appenders$file$file)  # cleanup  basic_config(file = tempfile(fileext = \"jsonl\")) #> <LoggerRoot> [info] root #>  #> appenders: #>   file   : <AppenderFile>    [all] -> /tmp/RtmpxWHygX/file1c5b2504394fjsonl #>   console: <AppenderConsole> [all] -> console unlink(lgr$appenders$file$file)  # cleanup  # log debug messages to a memory buffer basic_config(threshold = \"all\", memory = \"all\", console = \"info\") #> <LoggerRoot> [all] root #>  #> appenders: #>   console: <AppenderConsole> [info] -> console #>   memory : <AppenderBuffer>  [ all] -> 0 child Appenders lgr$info(\"an info message\") #> INFO  [08:04:23.711] an info message lgr$debug(\"a hidden message\") show_log() #> INFO  [08:04:23] an info message #> DEBUG [08:04:23] a hidden message  # reset to default config basic_config() #> <LoggerRoot> [info] root #>  #> appenders: #>   console: <AppenderConsole> [all] -> console"},{"path":"https://s-fleck.github.io/lgr/reference/colorize_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorize Levels — colorize_levels","title":"Colorize Levels — colorize_levels","text":"Colorize Levels","code":""},{"path":"https://s-fleck.github.io/lgr/reference/colorize_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorize Levels — colorize_levels","text":"","code":"colorize_levels(   x,   colors = getOption(\"lgr.colors\", NULL),   transform = identity )"},{"path":"https://s-fleck.github.io/lgr/reference/colorize_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colorize Levels — colorize_levels","text":"x numeric character levels colored. Unlike many functions lgr, character levels case sensitive function leading/trailing whitespace ignored make comfortable use colorize_levels() inside formatting functions. colors list functions used color log levels (likely crayon::crayon). transform function transform x (example toupper())","code":""},{"path":"https://s-fleck.github.io/lgr/reference/colorize_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colorize Levels — colorize_levels","text":"character vector wit color ANSI codes","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/colorize_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colorize Levels — colorize_levels","text":"","code":"cat(colorize_levels(c(100, 200))) #> 100 200 cat(colorize_levels(c(\"trace\", \"warn \", \"DEBUG\"))) #> trace warn  DEBUG cat(colorize_levels(c(\"trace\", \"warn \", \"DEBUG\"), transform = function(x) strtrim(x, 1) )) #> trace warn  DEBUG"},{"path":"https://s-fleck.github.io/lgr/reference/default_exception_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Demote an exception to a warning — default_exception_handler","title":"Demote an exception to a warning — default_exception_handler","text":"Throws timestamped warning instead stopping program. default exception handler used Loggers.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/default_exception_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demote an exception to a warning — default_exception_handler","text":"","code":"default_exception_handler(e)"},{"path":"https://s-fleck.github.io/lgr/reference/default_exception_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demote an exception to a warning — default_exception_handler","text":"e error condition object","code":""},{"path":"https://s-fleck.github.io/lgr/reference/default_exception_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demote an exception to a warning — default_exception_handler","text":"warning character vector","code":""},{"path":"https://s-fleck.github.io/lgr/reference/default_exception_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demote an exception to a warning — default_exception_handler","text":"","code":"tryCatch(stop(\"an error has occurred\"), error = default_exception_handler) #> Warning: [2025-07-15 08:04:24.249] NULL ~ error in `doTryCatch(return(expr), name, parentenv, handler)`: an error has occurred"},{"path":"https://s-fleck.github.io/lgr/reference/event_list.html","id":null,"dir":"Reference","previous_headings":"","what":"A List of LogEvents — event_list","title":"A List of LogEvents — event_list","text":"event_list class list()s whose elements LogEvents. structure occasionally used internally lgr (example AppenderBuffer) can useful developers want write Appenders.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/event_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A List of LogEvents — event_list","text":"","code":"event_list(...)  as_event_list(x, ...)  # S3 method for class 'list' as_event_list(x, ..., scalarize = FALSE)  # S3 method for class 'LogEvent' as_event_list(x, ..., scalarize = FALSE)  # S3 method for class 'data.frame' as_event_list(x, na.rm = TRUE, ...)  as.data.table.event_list(x, na.rm = TRUE)  # S3 method for class 'event_list' as.data.frame(   x,   row.names = NULL,   optional = FALSE,   stringsAsFactors = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://s-fleck.github.io/lgr/reference/event_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A List of LogEvents — event_list","text":"... event elements added list, as_*() functions parameters passed methods. x R object scalarize logical scalar. Turn LogEvents non-scalar msg field separate log events na.rm remove NA values coercing data.frame event_list(). row.names NULL character vector giving row     names data frame.  Missing values allowed. optional currently ignored included compatibility. stringsAsFactors logical scalar: character vectors converted factors? Defaults FALSE (opposed base::.data.frame()) included compatibility.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/event_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A List of LogEvents — event_list","text":"event_list() as_event_list() return flat list LogEvents. Nested lists get automatically flattened. .data.frame .data.table return data.frame data.table respectively","code":""},{"path":"https://s-fleck.github.io/lgr/reference/event_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A List of LogEvents — event_list","text":"convenience, .data.frame() .data.table() methods exist event lists.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/event_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A List of LogEvents — event_list","text":"","code":"e <- LogEvent$new(level = 300, msg = \"a\", logger = lgr) as_event_list(e) #> [[1]] #> WARN  [2025-07-15 08:04:24] a #>  #> attr(,\"class\") #> [1] \"event_list\" \"list\"       as_event_list(c(e, e)) #> [[1]] #> WARN  [2025-07-15 08:04:24] a #>  #> [[2]] #> WARN  [2025-07-15 08:04:24] a #>  #> attr(,\"class\") #> [1] \"event_list\" \"list\"       # nested lists get automatically unnested as_event_list(c(e, list(nested_event = e))) #> [[1]] #> WARN  [2025-07-15 08:04:24] a #>  #> $nested_event #> WARN  [2025-07-15 08:04:24] a #>  #> attr(,\"class\") #> [1] \"event_list\" \"list\"        # scalarize = TRUE \"unpacks\" events with vector log messages e <- LogEvent$new(level = 300, msg = c(\"A\", \"B\"), logger = lgr) as_event_list(e, scalarize = FALSE) #> [[1]] #> WARN  [2025-07-15 08:04:24] A #> WARN  [2025-07-15 08:04:24] B #>  #> attr(,\"class\") #> [1] \"event_list\" \"list\"       as_event_list(e, scalarize = TRUE) #> [[1]] #> WARN  [2025-07-15 08:04:24] A #>  #> [[2]] #> WARN  [2025-07-15 08:04:24] B #>  #> attr(,\"class\") #> [1] \"event_list\" \"list\""},{"path":"https://s-fleck.github.io/lgr/reference/get_log_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage Log Levels — get_log_levels","title":"Manage Log Levels — get_log_levels","text":"Display, add remove character labels log levels.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/get_log_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage Log Levels — get_log_levels","text":"","code":"get_log_levels()  add_log_levels(levels)  remove_log_levels(level_names)"},{"path":"https://s-fleck.github.io/lgr/reference/get_log_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage Log Levels — get_log_levels","text":"levels named character vector (see examples) level_names character vector names levels remove","code":""},{"path":"https://s-fleck.github.io/lgr/reference/get_log_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage Log Levels — get_log_levels","text":"named character vector globally available log levels (add_log_levels() remove_log_levels() return invisibly).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/get_log_levels.html","id":"default-log-levels","dir":"Reference","previous_headings":"","what":"Default Log Levels","title":"Manage Log Levels — get_log_levels","text":"lgr comes following predefined log levels identical log levels log4j.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/get_log_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage Log Levels — get_log_levels","text":"","code":"get_log_levels() #> fatal error  warn  info debug trace  #>   100   200   300   400   500   600  add_log_levels(c(errorish = 250)) get_log_levels() #>    fatal    error errorish     warn     info    debug    trace  #>      100      200      250      300      400      500      600  #> attr(,\"class\") #> [1] \"log_levels\" \"integer\"    remove_log_levels(\"errorish\") get_log_levels() #> fatal error  warn  info debug trace  #>   100   200   300   400   500   600  #> attr(,\"class\") #> [1] \"log_levels\" \"integer\""},{"path":"https://s-fleck.github.io/lgr/reference/get_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Create a Logger — get_logger","title":"Get/Create a Logger — get_logger","text":"Get/Create Logger","code":""},{"path":"https://s-fleck.github.io/lgr/reference/get_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Create a Logger — get_logger","text":"","code":"get_logger(name, class = Logger, reset = FALSE)  get_logger_glue(name)"},{"path":"https://s-fleck.github.io/lgr/reference/get_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Create a Logger — get_logger","text":"name character scalar vector: qualified name Logger hierarchical value. class R6ClassGenerator object. Usually Logger LoggerGlue valid choices. reset logical scalar. TRUE logger reset unconfigured state. Unlike $config(NULL) also replaces LoggerGlue vanilla Logger. Please note invalidate Logger references created reset call (see examples).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/get_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get/Create a Logger — get_logger","text":"Logger","code":""},{"path":"https://s-fleck.github.io/lgr/reference/get_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/Create a Logger — get_logger","text":"","code":"lg <- get_logger(\"log/ger/test\") # equivalent to lg <- get_logger(c(\"log\", \"ger\", \"test\")) lg$warn(\"a %s message\", \"warning\") #> WARN  [08:04:24.784] a warning message lg #> <Logger> [info] log/ger/test #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console lg$parent #> <Logger> [info] log/ger #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  if (requireNamespace('glue')){   lg <- get_logger_glue(\"log/ger\") } lg$warn(\"a {.text} message\", .text = \"warning\") #> WARN  [08:04:24.790] a warning message  # completely reset 'glue' to an unconfigured vanilla Logger get_logger(\"log/ger\", reset = TRUE) #> <Logger> [info] log/ger #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console # WARNING: this invalidates existing references to the Logger try(lg$info(\"lg has been invalidated an no longer works\")) #> Warning: [2025-07-15 08:04:24.794] log/ger ~ error in `lg$info(\"lg has been invalidated an no longer works\")`: Trying to log via a Logger reference that is no longer valid. Logger references become invalid when you reset a when you reset a Logger with `get_logger(reset = TRUE)`. Please re-create the Logger reference with with `get_logger(log/ger)`  lg <- get_logger(\"log/ger\") lg$info(\"now all is well again\") #> INFO  [08:04:24.795] now all is well again"},{"path":"https://s-fleck.github.io/lgr/reference/is_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an R Object is a Filter — is_filter","title":"Check if an R Object is a Filter — is_filter","text":"Returns TRUE R object can used Filter Loggers , Appenders: function single argument event; EventFilter R6::R6 object; object $filter(event) method. Note: Filter must return scalar TRUE FALSE, property checked is_filter().","code":""},{"path":"https://s-fleck.github.io/lgr/reference/is_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an R Object is a Filter — is_filter","text":"","code":"is_filter(x)"},{"path":"https://s-fleck.github.io/lgr/reference/is_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an R Object is a Filter — is_filter","text":"x R Object","code":""},{"path":"https://s-fleck.github.io/lgr/reference/is_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an R Object is a Filter — is_filter","text":"TRUE FALSE","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/label_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Label/Unlabel Log Levels — label_levels","title":"Label/Unlabel Log Levels — label_levels","text":"Label/Unlabel Log Levels","code":""},{"path":"https://s-fleck.github.io/lgr/reference/label_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label/Unlabel Log Levels — label_levels","text":"","code":"label_levels(levels, log_levels = getOption(\"lgr.log_levels\"))  unlabel_levels(labels, log_levels = getOption(\"lgr.log_levels\"))"},{"path":"https://s-fleck.github.io/lgr/reference/label_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label/Unlabel Log Levels — label_levels","text":"levels integer vector log levels log_levels named integer vector valid log levels labels character vector log level labels. Please note log levels lowercase default, even many appenders print uppercase.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/label_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label/Unlabel Log Levels — label_levels","text":"character vector label_levels() integer vector unlabel_levels","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/label_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label/Unlabel Log Levels — label_levels","text":"","code":"x <- label_levels(c(seq(0, 600, by = 100), NA)) print(x) #>       0     100     200     300     400     500     600    <NA>  #>   \"off\" \"fatal\" \"error\"  \"warn\"  \"info\" \"debug\" \"trace\"   \"all\"  unlabel_levels(x) #>   off fatal error  warn  info debug trace   all  #>     0   100   200   300   400   500   600    NA"},{"path":"https://s-fleck.github.io/lgr/reference/lgr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"A Fully Featured Logging Framework for R — lgr-package","title":"A Fully Featured Logging Framework for R — lgr-package","text":"details please refer vignette(\"lgr\", package = \"lgr\").","code":""},{"path":"https://s-fleck.github.io/lgr/reference/lgr-package.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"A Fully Featured Logging Framework for R — lgr-package","text":"can also set options .Rprofile make permanent. options can also set via environment variables (environment variables used option set manually R). lgr.colors list functions used coloring log levels console output. Usually functions package crayon lgr.log_levels named integer vector log levels known lgr labeling, setting thresholds, etc... . Instead modifying option manually use add_log_levels() remove_log_levels() lgr.default_threshold character integer scalar. minimum log level processed root logger. Defaults 400 (\"info\"), value environment variable LGR_DEFAULT_THRESHOLD set. option overrides threshold specified lgr.default_config set. lgr.default_config Default configuration root logger. Can either special list object, path YAML file, character scalar containing YAML code. See logger_config details. Defaults value environment variable LGR_DEFAULT_CONFIG set. lgr.suspend_logging TRUE FALSE. Suspend logging loggers. Defaults TRUE environment variable LGR_SUSPEND_LOGGING set \"TRUE\". Instead modifying option manually use suspend_logging() unsuspend_logging() lgr.user character scalar. default username lgr::get_user().","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/lgr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A Fully Featured Logging Framework for R — lgr-package","text":"Maintainer: Stefan Fleck stefan.b.fleck@gmail.com (ORCID)","code":""},{"path":"https://s-fleck.github.io/lgr/reference/logger_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Logger Configuration Objects — logger_config","title":"Logger Configuration Objects — logger_config","text":"logger_config() S3 constructor logger_config objects can passed $config method Logger. can just pass normal list instead, using constructor formal way includes additional argument checking.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/logger_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger Configuration Objects — logger_config","text":"","code":"logger_config(   appenders = NULL,   threshold = NULL,   filters = NULL,   exception_handler = NULL,   propagate = TRUE )  as_logger_config(x)  # S3 method for class 'list' as_logger_config(x)  # S3 method for class 'character' as_logger_config(x)"},{"path":"https://s-fleck.github.io/lgr/reference/logger_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger Configuration Objects — logger_config","text":"appenders see Logger threshold see Logger filters see Logger exception_handler see Logger propagate see Logger x R object. Especially: character scalar. can either path YAML file character scalar containing valid YAML list containing elements appenders, threshold, exception_handler, propagate filters. See section Fields Logger details. Logger object, clone configuration.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/logger_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logger Configuration Objects — logger_config","text":"list subclass \"logger_config\" logger_config object","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/logger_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a data.frame of all registered loggers — logger_index","title":"Return a data.frame of all registered loggers — logger_index","text":"Return data.frame registered loggers","code":""},{"path":"https://s-fleck.github.io/lgr/reference/logger_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a data.frame of all registered loggers — logger_index","text":"","code":"logger_index()"},{"path":"https://s-fleck.github.io/lgr/reference/logger_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a data.frame of all registered loggers — logger_index","text":"logger_index data.frame","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/logger_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a data.frame of all registered loggers — logger_index","text":"","code":"get_logger(\"tree/leaf\") #> <Logger> [info] tree/leaf #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console get_logger(\"shrub/leaf\") #> <Logger> [info] shrub/leaf #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console get_logger(\"plant/shrub/leaf\") #> <Logger> [info] plant/shrub/leaf #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console logger_index() #>                name configured threshold threshold_inherited propagate #> 1              root       TRUE       400               FALSE      TRUE #> 2              glue      FALSE       400                TRUE      TRUE #> 3                lg      FALSE       400                TRUE      TRUE #> 4          lg/child      FALSE       400                TRUE      TRUE #> 5               log      FALSE       400                TRUE      TRUE #> 6           log/ger      FALSE       400                TRUE      TRUE #> 7      log/ger/test      FALSE       400                TRUE      TRUE #> 8          mylogger      FALSE       400                TRUE      TRUE #> 9             plant      FALSE       400                TRUE      TRUE #> 10      plant/shrub      FALSE       400                TRUE      TRUE #> 11 plant/shrub/leaf      FALSE       400                TRUE      TRUE #> 12            shrub      FALSE       400                TRUE      TRUE #> 13       shrub/leaf      FALSE       400                TRUE      TRUE #> 14             test      FALSE       400                TRUE      TRUE #> 15             tree      FALSE       400                TRUE      TRUE #> 16        tree/leaf      FALSE       400                TRUE      TRUE #>    n_appenders #> 1            1 #> 2            0 #> 3            0 #> 4            0 #> 5            0 #> 6            0 #> 7            0 #> 8            0 #> 9            0 #> 10           0 #> 11           0 #> 12           0 #> 13           0 #> 14           0 #> 15           0 #> 16           0"},{"path":"https://s-fleck.github.io/lgr/reference/logger_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Logger Tree — logger_tree","title":"Logger Tree — logger_tree","text":"Displays tree structure registered Loggers.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/logger_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger Tree — logger_tree","text":"","code":"logger_tree()"},{"path":"https://s-fleck.github.io/lgr/reference/logger_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logger Tree — logger_tree","text":"data.frame subclass \"logger_tree\"","code":""},{"path":"https://s-fleck.github.io/lgr/reference/logger_tree.html","id":"symbology","dir":"Reference","previous_headings":"","what":"Symbology","title":"Logger Tree — logger_tree","text":"unconfigured Loggers displayed gray (terminal supports colors package crayon installed). logger's threshold set, displayed square brackets next name (reminder: threshold set, inherited next logger logger tree). logger's propagate field set FALSE red hash (#) sign displayed front logger name, imply pass LogEvents tree.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/logger_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger Tree — logger_tree","text":"","code":"get_logger(\"fancymodel\") #> <Logger> [info] fancymodel #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console get_logger(\"fancymodel/shiny\")$   set_propagate(FALSE)  get_logger(\"fancymodel/shiny/ui\")$   set_appenders(AppenderConsole$new())  get_logger(\"fancymodel/shiny/server\")$   set_appenders(list(AppenderConsole$new(), AppenderConsole$new()))$   set_threshold(\"trace\")  get_logger(\"fancymodel/plumber\") #> <Logger> [info] fancymodel/plumber #>  #> inherited appenders: #>   console: <AppenderConsole> [all] -> console  if (requireNamespace(\"cli\")){   print(logger_tree()) } #> root [info] -> 1 appender           #> ├─fancymodel                        #> │ ├─plumber                         #> │ └─#shiny                          #> │   ├─server [trace] -> 2 appenders #> │   └─ui -> 1 appender              #> ├─glue                              #> ├─lg                                #> │ └─child                           #> ├─log                               #> │ └─ger                             #> │   └─test                          #> ├─mylogger                          #> ├─plant                             #> │ └─shrub                           #> │   └─leaf                          #> ├─shrub                             #> │ └─leaf                            #> ├─test                              #> └─tree                              #>   └─leaf"},{"path":"https://s-fleck.github.io/lgr/reference/pad_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad Character Vectors — pad_right","title":"Pad Character Vectors — pad_right","text":"Pad Character Vectors","code":""},{"path":"https://s-fleck.github.io/lgr/reference/pad_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad Character Vectors — pad_right","text":"x character vector width integer scalar. target string width pad character scalar. symbol pad ","code":""},{"path":"https://s-fleck.github.io/lgr/reference/pad_right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad Character Vectors — pad_right","text":"","code":"pad_left(\"foo\", 5) #> [1] \"  foo\" pad_right(\"foo\", 5, \".\") #> [1] \"foo..\" pad_left(c(\"foo\", \"foooooo\"), pad = \".\") #> [1] \"....foo\" \"foooooo\""},{"path":"https://s-fleck.github.io/lgr/reference/print.Appender.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an Appender object — print.Appender","title":"Print an Appender object — print.Appender","text":"print() method Loggers displays important aspects Appender.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.Appender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an Appender object — print.Appender","text":"","code":"# S3 method for class 'Appender' print(x, color = requireNamespace(\"crayon\", quietly = TRUE), ...)"},{"path":"https://s-fleck.github.io/lgr/reference/print.Appender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an Appender object — print.Appender","text":"x R Object color TRUE FALSE: Output color? Requires Package crayon ... ignored","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.Appender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an Appender object — print.Appender","text":"print() returns x (invisibly), format() returns character vector.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.Appender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an Appender object — print.Appender","text":"","code":"# print most important details of logger print(lgr$console) #> NULL"},{"path":"https://s-fleck.github.io/lgr/reference/print.LogEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Print or Format Logging Data — print.LogEvent","title":"Print or Format Logging Data — print.LogEvent","text":"Print Format Logging Data","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.LogEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print or Format Logging Data — print.LogEvent","text":"","code":"# S3 method for class 'LogEvent' print(   x,   fmt = \"%L [%t] %m  %f\",   timestamp_fmt = \"%Y-%m-%d %H:%M:%S\",   colors = getOption(\"lgr.colors\"),   log_levels = getOption(\"lgr.log_levels\"),   pad_levels = \"right\",   ... )  # S3 method for class 'LogEvent' format(   x,   fmt = \"%L [%t] %m  %f\",   timestamp_fmt = \"%Y-%m-%d %H:%M:%S\",   colors = NULL,   log_levels = getOption(\"lgr.log_levels\"),   pad_levels = \"right\",   ... )"},{"path":"https://s-fleck.github.io/lgr/reference/print.LogEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print or Format Logging Data — print.LogEvent","text":"x LogEvent fmt character scalar may contain tokens listed bellow section Format Tokens. timestamp_fmt see format.POSIXct() colors list functions used color log levels (likely crayon::crayon). log_levels named integer vector valid log levels pad_levels right, left NULL. Whether pad log level names width left right side, . ... ignored","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.LogEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print or Format Logging Data — print.LogEvent","text":"x print() character scalar format()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.LogEvent.html","id":"format-tokens","dir":"Reference","previous_headings":"","what":"Format Tokens","title":"Print or Format Logging Data — print.LogEvent","text":"%t timestamp message, formatted according timestamp_fmt) %l log level, lowercase character representation %L log level, uppercase character representation %k log level, first letter lowercase character representation %K log level, first letter uppercase character representation %n log level, integer representation %g name logger %p PID (process ID). Useful logging code uses multiple threads. %c calling function %m log message %f custom fields x pseudo-JSON like format optimized human readability console output %j custom fields x proper JSON. requires jsonlite installed support colors opposed %f","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.LogEvent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print or Format Logging Data — print.LogEvent","text":"","code":"# standard fields can be printed using special tokens x <- LogEvent$new(   level = 300, msg = \"a test event\", caller = \"testfun()\", logger = lgr ) print(x) #> WARN  [2025-07-15 08:04:26] a test event print(x, fmt = c(\"%t (%p) %c: %n - %m\")) #> 2025-07-15 08:04:26 (7259) testfun(): 300 - a test event print(x, colors = NULL) #> WARN  [2025-07-15 08:04:26] a test event  # custom values y <- LogEvent$new(   level = 300, msg = \"a gps track\", logger = lgr,   waypoints = 10, location = \"Austria\" )  # default output with %f print(y) #> WARN  [2025-07-15 08:04:26] a gps track  {waypoints: `10`, location: `Austria`}  # proper JSON output with %j if (requireNamespace(\"jsonlite\")){ print(y, fmt = \"%L [%t] %m  %j\") } #> WARN  [2025-07-15 08:04:26] a gps track  {\"waypoints\":10,\"location\":\"Austria\"}"},{"path":"https://s-fleck.github.io/lgr/reference/print.Logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Logger Object — print.Logger","title":"Print a Logger Object — print.Logger","text":"print() method Loggers displays important aspects Logger. can also print just ancestry Logger can accessed logger$ancestry(). returns named character vector whose names correspond names Loggers logger inherits . TRUE/FALSE status elements correspond propagate values Loggers.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.Logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Logger Object — print.Logger","text":"","code":"# S3 method for class 'Logger' print(x, color = requireNamespace(\"crayon\", quietly = TRUE), ...)  # S3 method for class 'Logger' format(x, color = FALSE, ...)  # S3 method for class 'ancestry' print(x, color = requireNamespace(\"crayon\", quietly = TRUE), ...)  # S3 method for class 'ancestry' format(x, color = FALSE, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/print.Logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Logger Object — print.Logger","text":"x R Object color TRUE FALSE: Output color? Requires Package crayon ... ignored","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.Logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Logger Object — print.Logger","text":"print() returns x (invisibly), format() returns character vector.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.Logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Logger Object — print.Logger","text":"","code":"# print most important details of logger print(lgr) #> <LoggerRoot> [info] root #>  #> appenders: #>   console: <AppenderConsole> [all] -> console # print only the ancestry of a logger lg <- get_logger(\"AegonV/Aerys/Rheagar/Aegon\") get_logger(\"AegonV/Aerys/Rheagar\")$set_propagate(FALSE)  print(lg$ancestry) #> AegonV/Aerys/Rheagar/Aegon  unclass(lg$ancestry) #>  AegonV   Aerys Rheagar   Aegon  #>    TRUE    TRUE   FALSE    TRUE"},{"path":"https://s-fleck.github.io/lgr/reference/print.logger_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Logger Trees — print.logger_tree","title":"Print Logger Trees — print.logger_tree","text":"Print Logger Trees","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.logger_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Logger Trees — print.logger_tree","text":"","code":"# S3 method for class 'logger_tree' print(x, color = requireNamespace(\"crayon\", quietly = TRUE), ...)  # S3 method for class 'logger_tree' format(x, color = FALSE, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/print.logger_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Logger Trees — print.logger_tree","text":"x logger_tree color logical scalar. TRUE terminal output colorized via package crayon? ... passed cli::tree()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/print.logger_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Logger Trees — print.logger_tree","text":"x (invisibly)","code":""},{"path":"https://s-fleck.github.io/lgr/reference/read_json_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a JSON logfile — read_json_lines","title":"Read a JSON logfile — read_json_lines","text":"Read JSON logfile","code":""},{"path":"https://s-fleck.github.io/lgr/reference/read_json_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a JSON logfile — read_json_lines","text":"","code":"read_json_lines(file, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/read_json_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a JSON logfile — read_json_lines","text":"file character scalar. path JSON logfile (one JSON object per line) ... passed jsonlite::stream_in()","code":""},{"path":"https://s-fleck.github.io/lgr/reference/read_json_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a JSON logfile — read_json_lines","text":"data.frame","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/simple_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Logging — simple_logging","title":"Simple Logging — simple_logging","text":"lgr provides convenience functions managing root Logger. designed chiefly interactive use less verbose R6 method counterparts. threshold() sets retrieves threshold Appender Logger (minimum level log messages processes). target defaults root logger. (equivalent lgr::lgr$threshold lgr::lgr$set_threshold) console_threshold() shortcut set threshold root loggers AppenderConsole, usually Appender manages console output given R session. (equivalent lgr::lgr$appenders$console$threshold lgr::lgr$appenders$console$set_threshold) add_appender() remove_appender() add Appenders Loggers Appenders. (equivalent lgr::lgr$add_appender lgr::lgr$remove_appender) show_log() displays last n log entries Appender (Logger Appender attached) $show() method. , Appenders support function (try AppenderFile AppenderBuffer). show_data() show_dt() work similar show_log(), except return log data.frame data.table respectively. Appenders log formats can easily converted data.frames supported (try AppenderJson AppenderBuffer). easiest way try features adding AppenderBuffer root logger basic_config(memory = TRUE).","code":""},{"path":"https://s-fleck.github.io/lgr/reference/simple_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Logging — simple_logging","text":"","code":"log_exception(code, logfun = lgr$fatal, caller = get_caller(-3))  threshold(level, target = lgr::lgr)  console_threshold(level, target = lgr::lgr$appenders$console)  add_appender(appender, name = NULL, target = lgr::lgr)  remove_appender(pos, target = lgr::lgr)  show_log(threshold = NA_integer_, n = 20L, target = lgr::lgr)  show_dt(target = lgr::lgr)  show_data(target = lgr::lgr)"},{"path":"https://s-fleck.github.io/lgr/reference/simple_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Logging — simple_logging","text":"code R code logfun function processing log request, usually lgr$info(), lgr$debug(), etc... . caller character scalar. name calling function level integer character scalar: desired log level target Logger Appender name Logger character scalar appender Appender name character scalar. optional name new Appender. pos integer index character names appenders remove threshold character integer scalar. minimum log level processed root logger. n integer scalar. Show last n log entries match threshold","code":""},{"path":"https://s-fleck.github.io/lgr/reference/simple_logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Logging — simple_logging","text":"threshold() console_threshold() return log_level target integer (invisibly) add_appender() remove_appender() return target. show_log() prints console returns whatever target Appender's $show() method returns, usually character vector, data.frame data.table (invisibly). show_data() always returns data.frame show_dt() always returns data.table.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/simple_logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Logging — simple_logging","text":"","code":"# Get and set the threshold of the root logger threshold(\"error\") threshold() #> [1] 200 lgr$info(\"this will be supressed\") lgr$error(\"an important error message\") #> ERROR [08:04:27.239] an important error message  # you can also specify a target to modify other loggers lg <- get_logger(\"test\") threshold(\"fatal\", target = lg) threshold(target = lg) #> [1] 100  # If a Logger's threshold is not set, the threshold is inherited from # its parent, in this case the root logger (that we set to error/200 before) threshold(NULL, target = lg) threshold(target = lg) #> [1] 200  # Alternative R6 API for getting/setting thresholds lg$set_threshold(\"info\") lg$threshold #> [1] 400 lg$set_threshold(300) lg$threshold #> [1] 300 lg$set_threshold(NULL) lg$threshold #> [1] 200  # cleanup lgr$config(NULL) #> <LoggerRoot> [info] root lg$config(NULL) #> <Logger> [info] test   # add Appenders to a Logger add_appender(AppenderConsole$new(), \"second_console_appender\") lgr$fatal(\"Multiple console appenders are a bad idea\") #> FATAL [08:04:27.249] Multiple console appenders are a bad idea remove_appender(\"second_console_appender\") lgr$info(\"Good that we defined an appender name, so it's easy to remove\")  # Reconfigure the root logger basic_config(memory = TRUE) #> <LoggerRoot> [info] root #>  #> appenders: #>   console: <AppenderConsole> [all] -> console #>   memory : <AppenderBuffer>  [all] -> 0 child Appenders  # log some messages lgr$info(\"a log message\") #> INFO  [08:04:27.254] a log message lgr$info(\"another message with data\", data = 1:3) #> INFO  [08:04:27.255] another message with data {data: (1, 2, 3)}  show_log() #> INFO  [08:04:27] a log message #> INFO  [08:04:27] another message with data show_data() #>   level           timestamp logger caller                       msg #> 1   400 2025-07-15 08:04:27   root   eval             a log message #> 2   400 2025-07-15 08:04:27   root   eval another message with data #>                      rawMsg    data #> 1             a log message    NULL #> 2 another message with data 1, 2, 3  # cleanup lgr$config(NULL) #> <LoggerRoot> [info] root"},{"path":"https://s-fleck.github.io/lgr/reference/standardize_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize User-Input Log Levels to Their Integer Representation — standardize_threshold","title":"Standardize User-Input Log Levels to Their Integer Representation — standardize_threshold","text":"helper functions verifying log levels converting character integer representations. primarily useful want build Loggers, Appenders Layouts need handle log levels way consistent lgr .","code":""},{"path":"https://s-fleck.github.io/lgr/reference/standardize_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize User-Input Log Levels to Their Integer Representation — standardize_threshold","text":"","code":"standardize_threshold(   x,   log_levels = c(getOption(\"lgr.log_levels\"), c(all = NA_integer_, off = 0L)) )  is_threshold(x)  standardize_log_level(x, log_levels = getOption(\"lgr.log_levels\"))  is_log_level(x)  standardize_log_levels(x, log_levels = getOption(\"lgr.log_levels\"))  is_log_levels(x)"},{"path":"https://s-fleck.github.io/lgr/reference/standardize_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize User-Input Log Levels to Their Integer Representation — standardize_threshold","text":"x character integer scalar, vector standardize_log_levels log_levels named integer vector valid log levels","code":""},{"path":"https://s-fleck.github.io/lgr/reference/standardize_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize User-Input Log Levels to Their Integer Representation — standardize_threshold","text":"unnamed integer vector","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/standardize_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize User-Input Log Levels to Their Integer Representation — standardize_threshold","text":"","code":"standardize_threshold(\"info\") #> [1] 400 standardize_threshold(\"all\") #> [1] NA is_threshold(\"all\") #> [1] TRUE is_threshold(\"foobar\") #> [1] FALSE  standardize_log_level(\"info\") #> [1] 400 # all is a valid threshold, but not a valid log level try(is.na(standardize_log_level(\"all\"))) #> Error in standardize_log_level(\"all\") :  #>   '\"all\"' must either the numeric or character representation of one of the following log levels: fatal (100), error (200), warn (300), info (400), debug (500), trace (600) is_log_level(\"all\") #> [1] FALSE  # standardized_log_level intentionally only works with scalars, because many # functions require scalar log level inputs try(standardize_log_level(c(\"info\", \"fatal\"))) #> Error : 'c(\"info\", \"fatal\")' must be a scalar log level  # You can still use standardize_log_levels() (plural) to work with vectors standardize_log_levels(c(\"info\", \"fatal\")) #> [1] 400 100"},{"path":"https://s-fleck.github.io/lgr/reference/string_repr.html","id":null,"dir":"Reference","previous_headings":"","what":"Short string representation for R objects — string_repr","title":"Short string representation for R objects — string_repr","text":"inspired python function repr produces short string representation R object suitable logging error messages. generic can implement methods custom S3 objects.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/string_repr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Short string representation for R objects — string_repr","text":"","code":"string_repr(x, width = 32, ...)  # S3 method for class '`function`' string_repr(x, width = 32L, ...)  # S3 method for class 'data.frame' string_repr(x, width = 32L, ...)  # S3 method for class 'matrix' string_repr(x, width = 32L, ...)  # Default S3 method string_repr(x, width = 32L, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/string_repr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Short string representation for R objects — string_repr","text":"x R object. width scalar integer ... passed methods","code":""},{"path":"https://s-fleck.github.io/lgr/reference/string_repr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Short string representation for R objects — string_repr","text":"scalar character","code":""},{"path":"https://s-fleck.github.io/lgr/reference/string_repr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Short string representation for R objects — string_repr","text":"","code":"string_repr(iris) #> [1] \"<data.frame 150x5>\" string_repr(LETTERS) #> [1] \"(A, B, C, D, E, F, G, H, I, J..)\" string_repr(LETTERS, 10) #> [1] \"(A, B..)\""},{"path":"https://s-fleck.github.io/lgr/reference/suspend_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Suspend All Logging — suspend_logging","title":"Suspend All Logging — suspend_logging","text":"Completely disable logging loggers. example useful automated test code. suspend_logging() globally disables logging lgr unsuspend_logging() invoked, without_logging() with_logging() temporarily disable/enable logging.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/suspend_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suspend All Logging — suspend_logging","text":"","code":"suspend_logging()  unsuspend_logging()  without_logging(code)  with_logging(code)"},{"path":"https://s-fleck.github.io/lgr/reference/suspend_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suspend All Logging — suspend_logging","text":"code R code","code":""},{"path":"https://s-fleck.github.io/lgr/reference/suspend_logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suspend All Logging — suspend_logging","text":"suspend_logging() unsuspend_logging() return NULL (invisibly), without_logging() with_logging() returns whatever code returns.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/suspend_logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suspend All Logging — suspend_logging","text":"","code":"lg <- get_logger(\"test\")  # temporarily disable logging lg$fatal(\"foo\") without_logging({   lg$info(\"everything in this codeblock will be suppressed\")   lg$fatal(\"bar\") })  # globally disable logging suspend_logging() lg$fatal(\"bar\") with_logging(lg$fatal(\"foo\"))  # log anyways  # globally enable logging again unsuspend_logging() lg$fatal(\"foo\")"},{"path":"https://s-fleck.github.io/lgr/reference/system_infos.html","id":null,"dir":"Reference","previous_headings":"","what":"Information About the System — get_caller","title":"Information About the System — get_caller","text":"get_caller() Tries determine calling functions based .","code":""},{"path":"https://s-fleck.github.io/lgr/reference/system_infos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information About the System — get_caller","text":"","code":"get_caller(where = -1L)  get_user(fallback = \"unknown user\")"},{"path":"https://s-fleck.github.io/lgr/reference/system_infos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information About the System — get_caller","text":"integer scalar (usually negative). Look many frames call stack fallback fallback case user name determined","code":""},{"path":"https://s-fleck.github.io/lgr/reference/system_infos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information About the System — get_caller","text":"character scalar.","code":""},{"path":[]},{"path":"https://s-fleck.github.io/lgr/reference/system_infos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information About the System — get_caller","text":"","code":"foo <- function() get_caller(-1L) foo() #> [1] \"foo\" get_user() #> [1] \"unknown user\""},{"path":"https://s-fleck.github.io/lgr/reference/toString.LogEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a LogEvent to a character string — toString.LogEvent","title":"Convert a LogEvent to a character string — toString.LogEvent","text":"Convert LogEvent character string","code":""},{"path":"https://s-fleck.github.io/lgr/reference/toString.LogEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a LogEvent to a character string — toString.LogEvent","text":"","code":"# S3 method for class 'LogEvent' toString(x, ...)"},{"path":"https://s-fleck.github.io/lgr/reference/toString.LogEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a LogEvent to a character string — toString.LogEvent","text":"x LogEvent ... ignored","code":""},{"path":"https://s-fleck.github.io/lgr/reference/toString.LogEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a LogEvent to a character string — toString.LogEvent","text":"character scalar","code":""},{"path":"https://s-fleck.github.io/lgr/reference/toString.LogEvent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a LogEvent to a character string — toString.LogEvent","text":"","code":"toString(LogEvent$new(logger = lgr::lgr)) #> [1] \"$level: `400`, $timestamp: `2025-07-15 08:04:29.04823`, $logger: `root`, $caller: `NA`, $msg: `NA`, $rawMsg: `NA`\""},{"path":"https://s-fleck.github.io/lgr/reference/use_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a Simple Logger for a Package — use_logger","title":"Setup a Simple Logger for a Package — use_logger","text":"gives minimal logger appenders can use inside package name lg (e.g. lg$fatal(\"test\")). use_logger() modify files prints code copy paste.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/use_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a Simple Logger for a Package — use_logger","text":"","code":"use_logger(   pkg = desc::desc_get(\"Package\", rprojroot::find_package_root_file(\"DESCRIPTION\"))[[1]] )"},{"path":"https://s-fleck.github.io/lgr/reference/use_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a Simple Logger for a Package — use_logger","text":"pkg character scalar. Name package. default try get Package name automatically using packages rprojroot desc","code":""},{"path":"https://s-fleck.github.io/lgr/reference/use_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a Simple Logger for a Package — use_logger","text":"character scalar containing R code.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/use_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a Simple Logger for a Package — use_logger","text":"","code":"use_logger(\"testpkg\") #>  #> Add the following to any R file in your package (usually 'testpkg-package.R' or 'zzz.R'): #> .onLoad <- function(...){ #>   assign( #>     \"lg\", #>     lgr::get_logger(\"testpkg\"), #>     envir = parent.env(environment()) #>   ) #> }"},{"path":"https://s-fleck.github.io/lgr/reference/with_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject Values into Logging Calls — with_log_level","title":"Inject Values into Logging Calls — with_log_level","text":"with_log_level temporarily overrides log level LogEvents created target Logger.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/with_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject Values into Logging Calls — with_log_level","text":"","code":"with_log_level(level, code, logger = lgr::lgr)  with_log_value(values, code, logger = lgr::lgr)"},{"path":"https://s-fleck.github.io/lgr/reference/with_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject Values into Logging Calls — with_log_level","text":"level integer character scalar: desired log level code R code logger Logger name one (see get_logger()). Defaults root logger (lgr::lgr). values named list values injected logging calls","code":""},{"path":"https://s-fleck.github.io/lgr/reference/with_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject Values into Logging Calls — with_log_level","text":"whatever code return","code":""},{"path":"https://s-fleck.github.io/lgr/reference/with_log_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inject Values into Logging Calls — with_log_level","text":"functions abuses lgr's filter mechanic modify LogEvents -place passed Appenders. Use care can produce hard reason code.","code":""},{"path":"https://s-fleck.github.io/lgr/reference/with_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inject Values into Logging Calls — with_log_level","text":"","code":"with_log_level(\"warn\", {   lgr$info(\"More important than it seems\")   lgr$fatal(\"Really not so bad\") }) with_log_value(   list(msg = \"overriden msg\"),  {   lgr$info(\"bar\")   lgr$fatal(\"FOO\") })"},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-0459000","dir":"Changelog","previous_headings":"","what":"lgr 0.4.5.9000","title":"lgr 0.4.5.9000","text":"AppenderConsole now accept connection argument. called knitr rendering process, log messages now output stderr instead stdout default, avoid polluting markdown documents (#62, thx @gadenbuie). BREAKING: added rawMsg property LogEvents store message without string interpolation (e.g. still contains placeholders sprintf() glue()). rawMsg added default json log files (#60) Replace NULL values empty characters logging string \"<NULL>\". , NULL values resulted empty log messages. (#51) Support transformers LoggerGlue (see ?glue::glue) (#51) Add support excluded_fields Layout, exclude rawMsg default LayotJson updated README","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-044","dir":"Changelog","previous_headings":"","what":"lgr 0.4.4","title":"lgr 0.4.4","text":"CRAN release: 2022-09-05 %k %K parameters format.LogEvent now work expected using crayon terminal colours (#52). Fix default format string LayoutGlue using msg instead {msg} (#54, thx @mmuurr) Update docs use common term “structured logging” instead “custom fields” appropriate as_event_list.data.frame now really returns list LogEvents added as_LogEvent() coerce various event-like objects LogEvents rebuild docs R 4.2.0","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-043","dir":"Changelog","previous_headings":"","what":"lgr 0.4.3","title":"lgr 0.4.3","text":"CRAN release: 2021-09-16 logger_index() returns data.frame metadata registered loggers (#47) (thanks @Fuco1) export new string_repr() generic used layout R objects formatted log message output (#48, thanks @mmuurr) $log() method Logger LoggerGlue now unpacks conditions (except supplied named argument) (#45, thanks @mmuurr) Fix timezone related tests CRAN","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-042","dir":"Changelog","previous_headings":"","what":"lgr 0.4.2","title":"lgr 0.4.2","text":"CRAN release: 2021-01-10 Deprecated create_file argument AppenderFileRotating*. now hardcoded TRUE (FALSE doesn’t really make sense ). default_exception_handler() now throws informative warnings error encountered logging. drop tests deprecated future plans ensure compatibility upcoming versions future (#43)","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-041","dir":"Changelog","previous_headings":"","what":"lgr 0.4.1","title":"lgr 0.4.1","text":"CRAN release: 2020-10-20 Moved complex Appenders package lgrExtra. includes database Appenders, email push notifications AppenderDt (-memory data.tables). AppenderFile$show() can now filter log files formatted LayoutFormat log level. aware just greps file therefore return false positives lines log message contains strings can interpreted log levels. AppenderFile$show() AppenderFile$data now dispatches Layout$read() Layout$parse(). makes possible tie reading/parsing log files Layouts. Loggers gain list_log() method. See https://github.com/s-fleck/joblog R package leverages feature create custom log event types tracking status cron jobs. Export utility functions useful creating custom Appenders; standardize_threshold() event_list(). AppenderBuffer now defaults flush_threshold = NULL (never flush log level event) basic_config() now works documented .jsonl files AppenderMemory gains $clear() method clears buffer without sending events ’s attached appenders LayoutJson gains timestamp_fmt field can used custom timestamp formats (#34) added toString.LogEvent() compact representations LogEvents lgr now automatically tested major R version >= 3.2.0 AppenderMemory/AppenderBuffer: flush_threshold now independent should_flush function. default_should_flush() longer necessary removed. Updated AppenderFileRotating co compatibility rotor 0.3.0 errors now appropriate subclasses Logger$log() dispatches appenders - even throw error - instead aborting first Appender throws error complete rewrite documentation use new roxygen2 features R6 classes.","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-034","dir":"Changelog","previous_headings":"","what":"lgr 0.3.4","title":"lgr 0.3.4","text":"CRAN release: 2020-03-20 Hotfix compatibility R < 3.6.0 (#32)","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-033","dir":"Changelog","previous_headings":"","what":"lgr 0.3.3","title":"lgr 0.3.3","text":"CRAN release: 2019-09-27 Fixed performance regression looking parent Logger. notably affected performance “-nothing” logging (e.g. log message discarded loggers’ threshold)","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-032","dir":"Changelog","previous_headings":"","what":"lgr 0.3.2","title":"lgr 0.3.2","text":"CRAN release: 2019-08-20 Added AppenderSyslog logging syslog via rsyslog (thanks atheriel)","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-031","dir":"Changelog","previous_headings":"","what":"lgr 0.3.1","title":"lgr 0.3.1","text":"CRAN release: 2019-06-13 Added logger_tree() provides overview registered loggers Added print() format() methods Appenders AppenderMemory: added data dt active fields (return log data.frame data.table) Removed deprecated functions FATAL(), ERROR(). Use lgr$fatal(), lgr$error(), … instead. AppenderMemory: $buffer_dt() $show() now handle custom fields containing atomic vectors correctly","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-030","dir":"Changelog","previous_headings":"","what":"lgr 0.3.0","title":"lgr 0.3.0","text":"CRAN release: 2019-05-30 Added support rotating log files via AppenderFileRotating, AppenderFileRotatingDate AppenderFileRotatingTime. Requires package rotor. functions like show_log(), show_data(),… now accept logger names well Logger Appender objects target. AppenderFile$new() now creates empty file, fails can’t Improved support RMariaDB dropped support RMySQL Improved support RPostgres dropped support RPostgreSQL added reset argument get_logger(). completely resets configuration logger also replaces special loggers (LoggerGlue) vanilla ones.","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-022","dir":"Changelog","previous_headings":"","what":"lgr 0.2.2","title":"lgr 0.2.2","text":"root logger can now configured via options() /environment variables (see ?lgr) basic_config() now accepts thresholds (“info”, “fatal”) arguments console memory. default config root logger changed. now console appender default threshold \"info\". get back old behaviour run basic_config(threshold = \"\", console = \"info\", memory = \"\"). $config(NULL) now resets Logger default/unconfigured state $config() now accepts YAML well JSON files (YAML/JSON character string) with_log_level() with_log_value() now accept logger names well Logger objects logger argument get_logger_glue() now works intended Deprecated FATAL(), ERROR(). Use lgr$fatal(), lgr$error(), … instead.","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-021","dir":"Changelog","previous_headings":"","what":"lgr 0.2.1","title":"lgr 0.2.1","text":"CRAN release: 2019-03-25 Emergency fix ensures test suite cleans temporary files Removed .rd file unexported LoggerRoot class","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-020","dir":"Changelog","previous_headings":"","what":"lgr 0.2.0","title":"lgr 0.2.0","text":"CRAN release: 2019-03-22 get_loggers() registers new loggers lgr::loggers namespace, global decoupled approach similar python logging handles loggers. removed full_name active binding loggers. Loggers now qualified names name now identical full_name . consistency format method ancestry also revised. Logger inheritance now derived qualified name logger. Consequently lg$parent now derived lg$name, lg$set_parent() longer possible. threshold set new Logger, now inherits threshold parent Depend R6 >= 2.4.0 includes relevant fixes finalizers. finalize methods now private. Logger now config method allows configuring Loggers config objects YAML files (experimental) added with_logging(), opposite without_logging(). can handy automated tests might want switch logging /specific unit tests.","code":""},{"path":"https://s-fleck.github.io/lgr/news/index.html","id":"lgr-011","dir":"Changelog","previous_headings":"","what":"lgr 0.1.1","title":"lgr 0.1.1","text":"CRAN release: 2019-02-22 Added show_data() show_dt() quick access root loggers memory log data.frame data.table respectively numerous small fixes removed non-breaking-spaces .RD files. caused unforeseen problems compiling .pdf manual CRAN submission process.","code":""}]
